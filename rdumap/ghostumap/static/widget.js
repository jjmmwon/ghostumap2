function yt(t,r){return t==null||r==null?NaN:t<r?-1:t>r?1:t>=r?0:NaN}function xo(t,r){return t==null||r==null?NaN:r<t?-1:r>t?1:r>=t?0:NaN}function Ir(t){let r,o,e;t.length!==2?(r=yt,o=(s,l)=>yt(t(s),l),e=(s,l)=>t(s)-l):(r=t===yt||t===xo?t:gn,o=t,e=t);function a(s,l,d=0,m=s.length){if(d<m){if(r(l,l)!==0)return m;do{let p=d+m>>>1;o(s[p],l)<0?d=p+1:m=p}while(d<m)}return d}function i(s,l,d=0,m=s.length){if(d<m){if(r(l,l)!==0)return m;do{let p=d+m>>>1;o(s[p],l)<=0?d=p+1:m=p}while(d<m)}return d}function n(s,l,d=0,m=s.length){let p=a(s,l,d,m-1);return p>d&&e(s[p-1],l)>-e(s[p],l)?p-1:p}return{left:a,center:n,right:i}}function gn(){return 0}function wo(t){return t===null?NaN:+t}var Se=Ir(yt),Me=Se.right,un=Se.left,hn=Ir(wo).center,yo=Me;function Kt(t,r){let o,e;if(r===void 0)for(let a of t)a!=null&&(o===void 0?a>=a&&(o=e=a):(o>a&&(o=a),e<a&&(e=a)));else{let a=-1;for(let i of t)(i=r(i,++a,t))!=null&&(o===void 0?i>=i&&(o=e=i):(o>i&&(o=i),e<i&&(e=i)))}return[o,e]}var vn=Math.sqrt(50),xn=Math.sqrt(10),wn=Math.sqrt(2);function Tr(t,r,o){let e=(r-t)/Math.max(0,o),a=Math.floor(Math.log10(e)),i=e/Math.pow(10,a),n=i>=vn?10:i>=xn?5:i>=wn?2:1,s,l,d;return a<0?(d=Math.pow(10,-a)/n,s=Math.round(t*d),l=Math.round(r*d),s/d<t&&++s,l/d>r&&--l,d=-d):(d=Math.pow(10,a)*n,s=Math.round(t/d),l=Math.round(r/d),s*d<t&&++s,l*d>r&&--l),l<s&&.5<=o&&o<2?Tr(t,r,o*2):[s,l,d]}function jr(t,r,o){if(r=+r,t=+t,o=+o,!(o>0))return[];if(t===r)return[t];let e=r<t,[a,i,n]=e?Tr(r,t,o):Tr(t,r,o);if(!(i>=a))return[];let s=i-a+1,l=new Array(s);if(e)if(n<0)for(let d=0;d<s;++d)l[d]=(i-d)/-n;else for(let d=0;d<s;++d)l[d]=(i-d)*n;else if(n<0)for(let d=0;d<s;++d)l[d]=(a+d)/-n;else for(let d=0;d<s;++d)l[d]=(a+d)*n;return l}function Zt(t,r,o){return r=+r,t=+t,o=+o,Tr(t,r,o)[2]}function ko(t,r,o){r=+r,t=+t,o=+o;let e=r<t,a=e?Zt(r,t,o):Zt(t,r,o);return(e?-1:1)*(a<0?1/-a:a)}function Qt(t,r){let o;if(r===void 0)for(let e of t)e!=null&&(o<e||o===void 0&&e>=e)&&(o=e);else{let e=-1;for(let a of t)(a=r(a,++e,t))!=null&&(o<a||o===void 0&&a>=a)&&(o=a)}return o}var yn={value:()=>{}};function Ie(){for(var t=0,r=arguments.length,o={},e;t<r;++t){if(!(e=arguments[t]+"")||e in o||/[\s.]/.test(e))throw new Error("illegal type: "+e);o[e]=[]}return new Rr(o)}function Rr(t){this._=t}function kn(t,r){return t.trim().split(/^|\s+/).map(function(o){var e="",a=o.indexOf(".");if(a>=0&&(e=o.slice(a+1),o=o.slice(0,a)),o&&!r.hasOwnProperty(o))throw new Error("unknown type: "+o);return{type:o,name:e}})}Rr.prototype=Ie.prototype={constructor:Rr,on:function(t,r){var o=this._,e=kn(t+"",o),a,i=-1,n=e.length;if(arguments.length<2){for(;++i<n;)if((a=(t=e[i]).type)&&(a=_n(o[a],t.name)))return a;return}if(r!=null&&typeof r!="function")throw new Error("invalid callback: "+r);for(;++i<n;)if(a=(t=e[i]).type)o[a]=Ee(o[a],t.name,r);else if(r==null)for(a in o)o[a]=Ee(o[a],t.name,null);return this},copy:function(){var t={},r=this._;for(var o in r)t[o]=r[o].slice();return new Rr(t)},call:function(t,r){if((a=arguments.length-2)>0)for(var o=new Array(a),e=0,a,i;e<a;++e)o[e]=arguments[e+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=this._[t],e=0,a=i.length;e<a;++e)i[e].value.apply(r,o)},apply:function(t,r,o){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var e=this._[t],a=0,i=e.length;a<i;++a)e[a].value.apply(r,o)}};function _n(t,r){for(var o=0,e=t.length,a;o<e;++o)if((a=t[o]).name===r)return a.value}function Ee(t,r,o){for(var e=0,a=t.length;e<a;++e)if(t[e].name===r){t[e]=yn,t=t.slice(0,e).concat(t.slice(e+1));break}return o!=null&&t.push({name:r,value:o}),t}var Jt=Ie;var Nr="http://www.w3.org/1999/xhtml",_o={svg:"http://www.w3.org/2000/svg",xhtml:Nr,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function dt(t){var r=t+="",o=r.indexOf(":");return o>=0&&(r=t.slice(0,o))!=="xmlns"&&(t=t.slice(o+1)),_o.hasOwnProperty(r)?{space:_o[r],local:t}:t}function zn(t){return function(){var r=this.ownerDocument,o=this.namespaceURI;return o===Nr&&r.documentElement.namespaceURI===Nr?r.createElement(t):r.createElementNS(o,t)}}function An(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function Pt(t){var r=dt(t);return(r.local?An:zn)(r)}function $n(){}function kt(t){return t==null?$n:function(){return this.querySelector(t)}}function Te(t){typeof t!="function"&&(t=kt(t));for(var r=this._groups,o=r.length,e=new Array(o),a=0;a<o;++a)for(var i=r[a],n=i.length,s=e[a]=new Array(n),l,d,m=0;m<n;++m)(l=i[m])&&(d=t.call(l,l.__data__,m,i))&&("__data__"in l&&(d.__data__=l.__data__),s[m]=d);return new E(e,this._parents)}function tr(t){return t==null?[]:Array.isArray(t)?t:Array.from(t)}function Sn(){return[]}function rr(t){return t==null?Sn:function(){return this.querySelectorAll(t)}}function Mn(t){return function(){return tr(t.apply(this,arguments))}}function je(t){typeof t=="function"?t=Mn(t):t=rr(t);for(var r=this._groups,o=r.length,e=[],a=[],i=0;i<o;++i)for(var n=r[i],s=n.length,l,d=0;d<s;++d)(l=n[d])&&(e.push(t.call(l,l.__data__,d,n)),a.push(l));return new E(e,a)}function or(t){return function(){return this.matches(t)}}function Br(t){return function(r){return r.matches(t)}}var En=Array.prototype.find;function In(t){return function(){return En.call(this.children,t)}}function Tn(){return this.firstElementChild}function Re(t){return this.select(t==null?Tn:In(typeof t=="function"?t:Br(t)))}var jn=Array.prototype.filter;function Rn(){return Array.from(this.children)}function Nn(t){return function(){return jn.call(this.children,t)}}function Ne(t){return this.selectAll(t==null?Rn:Nn(typeof t=="function"?t:Br(t)))}function Be(t){typeof t!="function"&&(t=or(t));for(var r=this._groups,o=r.length,e=new Array(o),a=0;a<o;++a)for(var i=r[a],n=i.length,s=e[a]=[],l,d=0;d<n;++d)(l=i[d])&&t.call(l,l.__data__,d,i)&&s.push(l);return new E(e,this._parents)}function Cr(t){return new Array(t.length)}function Ce(){return new E(this._enter||this._groups.map(Cr),this._parents)}function er(t,r){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=r}er.prototype={constructor:er,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,r){return this._parent.insertBefore(t,r)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function Ge(t){return function(){return t}}function Bn(t,r,o,e,a,i){for(var n=0,s,l=r.length,d=i.length;n<d;++n)(s=r[n])?(s.__data__=i[n],e[n]=s):o[n]=new er(t,i[n]);for(;n<l;++n)(s=r[n])&&(a[n]=s)}function Cn(t,r,o,e,a,i,n){var s,l,d=new Map,m=r.length,p=i.length,b=new Array(m),f;for(s=0;s<m;++s)(l=r[s])&&(b[s]=f=n.call(l,l.__data__,s,r)+"",d.has(f)?a[s]=l:d.set(f,l));for(s=0;s<p;++s)f=n.call(t,i[s],s,i)+"",(l=d.get(f))?(e[s]=l,l.__data__=i[s],d.delete(f)):o[s]=new er(t,i[s]);for(s=0;s<m;++s)(l=r[s])&&d.get(b[s])===l&&(a[s]=l)}function Gn(t){return t.__data__}function Pe(t,r){if(!arguments.length)return Array.from(this,Gn);var o=r?Cn:Bn,e=this._parents,a=this._groups;typeof t!="function"&&(t=Ge(t));for(var i=a.length,n=new Array(i),s=new Array(i),l=new Array(i),d=0;d<i;++d){var m=e[d],p=a[d],b=p.length,f=Pn(t.call(m,m&&m.__data__,d,e)),u=f.length,k=s[d]=new Array(u),A=n[d]=new Array(u),x=l[d]=new Array(b);o(m,p,k,A,x,f,r);for(var I=0,M=0,G,$;I<u;++I)if(G=k[I]){for(I>=M&&(M=I+1);!($=A[M])&&++M<u;);G._next=$||null}}return n=new E(n,e),n._enter=s,n._exit=l,n}function Pn(t){return typeof t=="object"&&"length"in t?t:Array.from(t)}function Oe(){return new E(this._exit||this._groups.map(Cr),this._parents)}function Le(t,r,o){var e=this.enter(),a=this,i=this.exit();return typeof t=="function"?(e=t(e),e&&(e=e.selection())):e=e.append(t+""),r!=null&&(a=r(a),a&&(a=a.selection())),o==null?i.remove():o(i),e&&a?e.merge(a).order():a}function De(t){for(var r=t.selection?t.selection():t,o=this._groups,e=r._groups,a=o.length,i=e.length,n=Math.min(a,i),s=new Array(a),l=0;l<n;++l)for(var d=o[l],m=e[l],p=d.length,b=s[l]=new Array(p),f,u=0;u<p;++u)(f=d[u]||m[u])&&(b[u]=f);for(;l<a;++l)s[l]=o[l];return new E(s,this._parents)}function Ve(){for(var t=this._groups,r=-1,o=t.length;++r<o;)for(var e=t[r],a=e.length-1,i=e[a],n;--a>=0;)(n=e[a])&&(i&&n.compareDocumentPosition(i)^4&&i.parentNode.insertBefore(n,i),i=n);return this}function He(t){t||(t=On);function r(p,b){return p&&b?t(p.__data__,b.__data__):!p-!b}for(var o=this._groups,e=o.length,a=new Array(e),i=0;i<e;++i){for(var n=o[i],s=n.length,l=a[i]=new Array(s),d,m=0;m<s;++m)(d=n[m])&&(l[m]=d);l.sort(r)}return new E(a,this._parents).order()}function On(t,r){return t<r?-1:t>r?1:t>=r?0:NaN}function qe(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this}function Ue(){return Array.from(this)}function Ye(){for(var t=this._groups,r=0,o=t.length;r<o;++r)for(var e=t[r],a=0,i=e.length;a<i;++a){var n=e[a];if(n)return n}return null}function Xe(){let t=0;for(let r of this)++t;return t}function Fe(){return!this.node()}function We(t){for(var r=this._groups,o=0,e=r.length;o<e;++o)for(var a=r[o],i=0,n=a.length,s;i<n;++i)(s=a[i])&&t.call(s,s.__data__,i,a);return this}function Ln(t){return function(){this.removeAttribute(t)}}function Dn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Vn(t,r){return function(){this.setAttribute(t,r)}}function Hn(t,r){return function(){this.setAttributeNS(t.space,t.local,r)}}function qn(t,r){return function(){var o=r.apply(this,arguments);o==null?this.removeAttribute(t):this.setAttribute(t,o)}}function Un(t,r){return function(){var o=r.apply(this,arguments);o==null?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,o)}}function Ke(t,r){var o=dt(t);if(arguments.length<2){var e=this.node();return o.local?e.getAttributeNS(o.space,o.local):e.getAttribute(o)}return this.each((r==null?o.local?Dn:Ln:typeof r=="function"?o.local?Un:qn:o.local?Hn:Vn)(o,r))}function Gr(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Yn(t){return function(){this.style.removeProperty(t)}}function Xn(t,r,o){return function(){this.style.setProperty(t,r,o)}}function Fn(t,r,o){return function(){var e=r.apply(this,arguments);e==null?this.style.removeProperty(t):this.style.setProperty(t,e,o)}}function Ze(t,r,o){return arguments.length>1?this.each((r==null?Yn:typeof r=="function"?Fn:Xn)(t,r,o??"")):ft(this.node(),t)}function ft(t,r){return t.style.getPropertyValue(r)||Gr(t).getComputedStyle(t,null).getPropertyValue(r)}function Wn(t){return function(){delete this[t]}}function Kn(t,r){return function(){this[t]=r}}function Zn(t,r){return function(){var o=r.apply(this,arguments);o==null?delete this[t]:this[t]=o}}function Qe(t,r){return arguments.length>1?this.each((r==null?Wn:typeof r=="function"?Zn:Kn)(t,r)):this.node()[t]}function Je(t){return t.trim().split(/^|\s+/)}function zo(t){return t.classList||new ta(t)}function ta(t){this._node=t,this._names=Je(t.getAttribute("class")||"")}ta.prototype={add:function(t){var r=this._names.indexOf(t);r<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var r=this._names.indexOf(t);r>=0&&(this._names.splice(r,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function ra(t,r){for(var o=zo(t),e=-1,a=r.length;++e<a;)o.add(r[e])}function oa(t,r){for(var o=zo(t),e=-1,a=r.length;++e<a;)o.remove(r[e])}function Qn(t){return function(){ra(this,t)}}function Jn(t){return function(){oa(this,t)}}function ts(t,r){return function(){(r.apply(this,arguments)?ra:oa)(this,t)}}function ea(t,r){var o=Je(t+"");if(arguments.length<2){for(var e=zo(this.node()),a=-1,i=o.length;++a<i;)if(!e.contains(o[a]))return!1;return!0}return this.each((typeof r=="function"?ts:r?Qn:Jn)(o,r))}function rs(){this.textContent=""}function os(t){return function(){this.textContent=t}}function es(t){return function(){var r=t.apply(this,arguments);this.textContent=r??""}}function aa(t){return arguments.length?this.each(t==null?rs:(typeof t=="function"?es:os)(t)):this.node().textContent}function as(){this.innerHTML=""}function is(t){return function(){this.innerHTML=t}}function ns(t){return function(){var r=t.apply(this,arguments);this.innerHTML=r??""}}function ia(t){return arguments.length?this.each(t==null?as:(typeof t=="function"?ns:is)(t)):this.node().innerHTML}function ss(){this.nextSibling&&this.parentNode.appendChild(this)}function na(){return this.each(ss)}function ls(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function sa(){return this.each(ls)}function la(t){var r=typeof t=="function"?t:Pt(t);return this.select(function(){return this.appendChild(r.apply(this,arguments))})}function ds(){return null}function da(t,r){var o=typeof t=="function"?t:Pt(t),e=r==null?ds:typeof r=="function"?r:kt(r);return this.select(function(){return this.insertBefore(o.apply(this,arguments),e.apply(this,arguments)||null)})}function ms(){var t=this.parentNode;t&&t.removeChild(this)}function ma(){return this.each(ms)}function ps(){var t=this.cloneNode(!1),r=this.parentNode;return r?r.insertBefore(t,this.nextSibling):t}function cs(){var t=this.cloneNode(!0),r=this.parentNode;return r?r.insertBefore(t,this.nextSibling):t}function pa(t){return this.select(t?cs:ps)}function ca(t){return arguments.length?this.property("__data__",t):this.node().__data__}function bs(t){return function(r){t.call(this,r,this.__data__)}}function fs(t){return t.trim().split(/^|\s+/).map(function(r){var o="",e=r.indexOf(".");return e>=0&&(o=r.slice(e+1),r=r.slice(0,e)),{type:r,name:o}})}function gs(t){return function(){var r=this.__on;if(r){for(var o=0,e=-1,a=r.length,i;o<a;++o)i=r[o],(!t.type||i.type===t.type)&&i.name===t.name?this.removeEventListener(i.type,i.listener,i.options):r[++e]=i;++e?r.length=e:delete this.__on}}}function us(t,r,o){return function(){var e=this.__on,a,i=bs(r);if(e){for(var n=0,s=e.length;n<s;++n)if((a=e[n]).type===t.type&&a.name===t.name){this.removeEventListener(a.type,a.listener,a.options),this.addEventListener(a.type,a.listener=i,a.options=o),a.value=r;return}}this.addEventListener(t.type,i,o),a={type:t.type,name:t.name,value:r,listener:i,options:o},e?e.push(a):this.__on=[a]}}function ba(t,r,o){var e=fs(t+""),a,i=e.length,n;if(arguments.length<2){var s=this.node().__on;if(s){for(var l=0,d=s.length,m;l<d;++l)for(a=0,m=s[l];a<i;++a)if((n=e[a]).type===m.type&&n.name===m.name)return m.value}return}for(s=r?us:gs,a=0;a<i;++a)this.each(s(e[a],r,o));return this}function fa(t,r,o){var e=Gr(t),a=e.CustomEvent;typeof a=="function"?a=new a(r,o):(a=e.document.createEvent("Event"),o?(a.initEvent(r,o.bubbles,o.cancelable),a.detail=o.detail):a.initEvent(r,!1,!1)),t.dispatchEvent(a)}function hs(t,r){return function(){return fa(this,t,r)}}function vs(t,r){return function(){return fa(this,t,r.apply(this,arguments))}}function ga(t,r){return this.each((typeof r=="function"?vs:hs)(t,r))}function*ua(){for(var t=this._groups,r=0,o=t.length;r<o;++r)for(var e=t[r],a=0,i=e.length,n;a<i;++a)(n=e[a])&&(yield n)}var ar=[null];function E(t,r){this._groups=t,this._parents=r}function ha(){return new E([[document.documentElement]],ar)}function xs(){return this}E.prototype=ha.prototype={constructor:E,select:Te,selectAll:je,selectChild:Re,selectChildren:Ne,filter:Be,data:Pe,enter:Ce,exit:Oe,join:Le,merge:De,selection:xs,order:Ve,sort:He,call:qe,nodes:Ue,node:Ye,size:Xe,empty:Fe,each:We,attr:Ke,style:Ze,property:Qe,classed:ea,text:aa,html:ia,raise:na,lower:sa,append:la,insert:da,remove:ma,clone:pa,datum:ca,on:ba,dispatch:ga,[Symbol.iterator]:ua};var mt=ha;function B(t){return typeof t=="string"?new E([[document.querySelector(t)]],[document.documentElement]):new E([[t]],ar)}function Ot(t){return B(Pt(t).call(document.documentElement))}function va(t){let r;for(;r=t.sourceEvent;)t=r;return t}function pt(t,r){if(t=va(t),r===void 0&&(r=t.currentTarget),r){var o=r.ownerSVGElement||r;if(o.createSVGPoint){var e=o.createSVGPoint();return e.x=t.clientX,e.y=t.clientY,e=e.matrixTransform(r.getScreenCTM().inverse()),[e.x,e.y]}if(r.getBoundingClientRect){var a=r.getBoundingClientRect();return[t.clientX-a.left-r.clientLeft,t.clientY-a.top-r.clientTop]}}return[t.pageX,t.pageY]}function Pr(t){return typeof t=="string"?new E([document.querySelectorAll(t)],[document.documentElement]):new E([tr(t)],ar)}var Or={capture:!0,passive:!1};function Lr(t){t.preventDefault(),t.stopImmediatePropagation()}function Ao(t){var r=t.document.documentElement,o=B(t).on("dragstart.drag",Lr,Or);"onselectstart"in r?o.on("selectstart.drag",Lr,Or):(r.__noselect=r.style.MozUserSelect,r.style.MozUserSelect="none")}function $o(t,r){var o=t.document.documentElement,e=B(t).on("dragstart.drag",null);r&&(e.on("click.drag",Lr,Or),setTimeout(function(){e.on("click.drag",null)},0)),"onselectstart"in o?e.on("selectstart.drag",null):(o.style.MozUserSelect=o.__noselect,delete o.__noselect)}function Dr(t,r,o){t.prototype=r.prototype=o,o.constructor=t}function So(t,r){var o=Object.create(t.prototype);for(var e in r)o[e]=r[e];return o}function sr(){}var ir=.7,qr=1/ir,Lt="\\s*([+-]?\\d+)\\s*",nr="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",rt="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ws=/^#([0-9a-f]{3,8})$/,ys=new RegExp(`^rgb\\(${Lt},${Lt},${Lt}\\)$`),ks=new RegExp(`^rgb\\(${rt},${rt},${rt}\\)$`),_s=new RegExp(`^rgba\\(${Lt},${Lt},${Lt},${nr}\\)$`),zs=new RegExp(`^rgba\\(${rt},${rt},${rt},${nr}\\)$`),As=new RegExp(`^hsl\\(${nr},${rt},${rt}\\)$`),$s=new RegExp(`^hsla\\(${nr},${rt},${rt},${nr}\\)$`),xa={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};Dr(sr,K,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:wa,formatHex:wa,formatHex8:Ss,formatHsl:Ms,formatRgb:ya,toString:ya});function wa(){return this.rgb().formatHex()}function Ss(){return this.rgb().formatHex8()}function Ms(){return Sa(this).formatHsl()}function ya(){return this.rgb().formatRgb()}function K(t){var r,o;return t=(t+"").trim().toLowerCase(),(r=ws.exec(t))?(o=r[1].length,r=parseInt(r[1],16),o===6?ka(r):o===3?new H(r>>8&15|r>>4&240,r>>4&15|r&240,(r&15)<<4|r&15,1):o===8?Vr(r>>24&255,r>>16&255,r>>8&255,(r&255)/255):o===4?Vr(r>>12&15|r>>8&240,r>>8&15|r>>4&240,r>>4&15|r&240,((r&15)<<4|r&15)/255):null):(r=ys.exec(t))?new H(r[1],r[2],r[3],1):(r=ks.exec(t))?new H(r[1]*255/100,r[2]*255/100,r[3]*255/100,1):(r=_s.exec(t))?Vr(r[1],r[2],r[3],r[4]):(r=zs.exec(t))?Vr(r[1]*255/100,r[2]*255/100,r[3]*255/100,r[4]):(r=As.exec(t))?Aa(r[1],r[2]/100,r[3]/100,1):(r=$s.exec(t))?Aa(r[1],r[2]/100,r[3]/100,r[4]):xa.hasOwnProperty(t)?ka(xa[t]):t==="transparent"?new H(NaN,NaN,NaN,0):null}function ka(t){return new H(t>>16&255,t>>8&255,t&255,1)}function Vr(t,r,o,e){return e<=0&&(t=r=o=NaN),new H(t,r,o,e)}function Es(t){return t instanceof sr||(t=K(t)),t?(t=t.rgb(),new H(t.r,t.g,t.b,t.opacity)):new H}function Dt(t,r,o,e){return arguments.length===1?Es(t):new H(t,r,o,e??1)}function H(t,r,o,e){this.r=+t,this.g=+r,this.b=+o,this.opacity=+e}Dr(H,Dt,So(sr,{brighter(t){return t=t==null?qr:Math.pow(qr,t),new H(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=t==null?ir:Math.pow(ir,t),new H(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new H(zt(this.r),zt(this.g),zt(this.b),Ur(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:_a,formatHex:_a,formatHex8:Is,formatRgb:za,toString:za}));function _a(){return`#${_t(this.r)}${_t(this.g)}${_t(this.b)}`}function Is(){return`#${_t(this.r)}${_t(this.g)}${_t(this.b)}${_t((isNaN(this.opacity)?1:this.opacity)*255)}`}function za(){let t=Ur(this.opacity);return`${t===1?"rgb(":"rgba("}${zt(this.r)}, ${zt(this.g)}, ${zt(this.b)}${t===1?")":`, ${t})`}`}function Ur(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function zt(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function _t(t){return t=zt(t),(t<16?"0":"")+t.toString(16)}function Aa(t,r,o,e){return e<=0?t=r=o=NaN:o<=0||o>=1?t=r=NaN:r<=0&&(t=NaN),new W(t,r,o,e)}function Sa(t){if(t instanceof W)return new W(t.h,t.s,t.l,t.opacity);if(t instanceof sr||(t=K(t)),!t)return new W;if(t instanceof W)return t;t=t.rgb();var r=t.r/255,o=t.g/255,e=t.b/255,a=Math.min(r,o,e),i=Math.max(r,o,e),n=NaN,s=i-a,l=(i+a)/2;return s?(r===i?n=(o-e)/s+(o<e)*6:o===i?n=(e-r)/s+2:n=(r-o)/s+4,s/=l<.5?i+a:2-i-a,n*=60):s=l>0&&l<1?0:n,new W(n,s,l,t.opacity)}function Ma(t,r,o,e){return arguments.length===1?Sa(t):new W(t,r,o,e??1)}function W(t,r,o,e){this.h=+t,this.s=+r,this.l=+o,this.opacity=+e}Dr(W,Ma,So(sr,{brighter(t){return t=t==null?qr:Math.pow(qr,t),new W(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=t==null?ir:Math.pow(ir,t),new W(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+(this.h<0)*360,r=isNaN(t)||isNaN(this.s)?0:this.s,o=this.l,e=o+(o<.5?o:1-o)*r,a=2*o-e;return new H(Mo(t>=240?t-240:t+120,a,e),Mo(t,a,e),Mo(t<120?t+240:t-120,a,e),this.opacity)},clamp(){return new W($a(this.h),Hr(this.s),Hr(this.l),Ur(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){let t=Ur(this.opacity);return`${t===1?"hsl(":"hsla("}${$a(this.h)}, ${Hr(this.s)*100}%, ${Hr(this.l)*100}%${t===1?")":`, ${t})`}`}}));function $a(t){return t=(t||0)%360,t<0?t+360:t}function Hr(t){return Math.max(0,Math.min(1,t||0))}function Mo(t,r,o){return(t<60?r+(o-r)*t/60:t<180?o:t<240?r+(o-r)*(240-t)/60:r)*255}function Eo(t,r,o,e,a){var i=t*t,n=i*t;return((1-3*t+3*i-n)*r+(4-6*i+3*n)*o+(1+3*t+3*i-3*n)*e+n*a)/6}function Ea(t){var r=t.length-1;return function(o){var e=o<=0?o=0:o>=1?(o=1,r-1):Math.floor(o*r),a=t[e],i=t[e+1],n=e>0?t[e-1]:2*a-i,s=e<r-1?t[e+2]:2*i-a;return Eo((o-e/r)*r,n,a,i,s)}}function Ia(t){var r=t.length;return function(o){var e=Math.floor(((o%=1)<0?++o:o)*r),a=t[(e+r-1)%r],i=t[e%r],n=t[(e+1)%r],s=t[(e+2)%r];return Eo((o-e/r)*r,a,i,n,s)}}var lr=t=>()=>t;function Ts(t,r){return function(o){return t+o*r}}function js(t,r,o){return t=Math.pow(t,o),r=Math.pow(r,o)-t,o=1/o,function(e){return Math.pow(t+e*r,o)}}function Ta(t){return(t=+t)==1?Yr:function(r,o){return o-r?js(r,o,t):lr(isNaN(r)?o:r)}}function Yr(t,r){var o=r-t;return o?Ts(t,o):lr(isNaN(t)?r:t)}var At=function t(r){var o=Ta(r);function e(a,i){var n=o((a=Dt(a)).r,(i=Dt(i)).r),s=o(a.g,i.g),l=o(a.b,i.b),d=Yr(a.opacity,i.opacity);return function(m){return a.r=n(m),a.g=s(m),a.b=l(m),a.opacity=d(m),a+""}}return e.gamma=t,e}(1);function ja(t){return function(r){var o=r.length,e=new Array(o),a=new Array(o),i=new Array(o),n,s;for(n=0;n<o;++n)s=Dt(r[n]),e[n]=s.r||0,a[n]=s.g||0,i[n]=s.b||0;return e=t(e),a=t(a),i=t(i),s.opacity=1,function(l){return s.r=e(l),s.g=a(l),s.b=i(l),s+""}}}var Rs=ja(Ea),Ns=ja(Ia);function Ra(t,r){r||(r=[]);var o=t?Math.min(r.length,t.length):0,e=r.slice(),a;return function(i){for(a=0;a<o;++a)e[a]=t[a]*(1-i)+r[a]*i;return e}}function Na(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Ba(t,r){var o=r?r.length:0,e=t?Math.min(o,t.length):0,a=new Array(e),i=new Array(o),n;for(n=0;n<e;++n)a[n]=$t(t[n],r[n]);for(;n<o;++n)i[n]=r[n];return function(s){for(n=0;n<e;++n)i[n]=a[n](s);return i}}function Ca(t,r){var o=new Date;return t=+t,r=+r,function(e){return o.setTime(t*(1-e)+r*e),o}}function O(t,r){return t=+t,r=+r,function(o){return t*(1-o)+r*o}}function Ga(t,r){var o={},e={},a;(t===null||typeof t!="object")&&(t={}),(r===null||typeof r!="object")&&(r={});for(a in r)a in t?o[a]=$t(t[a],r[a]):e[a]=r[a];return function(i){for(a in o)e[a]=o[a](i);return e}}var To=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Io=new RegExp(To.source,"g");function Bs(t){return function(){return t}}function Cs(t){return function(r){return t(r)+""}}function dr(t,r){var o=To.lastIndex=Io.lastIndex=0,e,a,i,n=-1,s=[],l=[];for(t=t+"",r=r+"";(e=To.exec(t))&&(a=Io.exec(r));)(i=a.index)>o&&(i=r.slice(o,i),s[n]?s[n]+=i:s[++n]=i),(e=e[0])===(a=a[0])?s[n]?s[n]+=a:s[++n]=a:(s[++n]=null,l.push({i:n,x:O(e,a)})),o=Io.lastIndex;return o<r.length&&(i=r.slice(o),s[n]?s[n]+=i:s[++n]=i),s.length<2?l[0]?Cs(l[0].x):Bs(r):(r=l.length,function(d){for(var m=0,p;m<r;++m)s[(p=l[m]).i]=p.x(d);return s.join("")})}function $t(t,r){var o=typeof r,e;return r==null||o==="boolean"?lr(r):(o==="number"?O:o==="string"?(e=K(r))?(r=e,At):dr:r instanceof K?At:r instanceof Date?Ca:Na(r)?Ra:Array.isArray(r)?Ba:typeof r.valueOf!="function"&&typeof r.toString!="function"||isNaN(r)?Ga:O)(t,r)}function jo(t,r){return t=+t,r=+r,function(o){return Math.round(t*(1-o)+r*o)}}var Pa=180/Math.PI,Xr={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Ro(t,r,o,e,a,i){var n,s,l;return(n=Math.sqrt(t*t+r*r))&&(t/=n,r/=n),(l=t*o+r*e)&&(o-=t*l,e-=r*l),(s=Math.sqrt(o*o+e*e))&&(o/=s,e/=s,l/=s),t*e<r*o&&(t=-t,r=-r,l=-l,n=-n),{translateX:a,translateY:i,rotate:Math.atan2(r,t)*Pa,skewX:Math.atan(l)*Pa,scaleX:n,scaleY:s}}var Fr;function Oa(t){let r=new(typeof DOMMatrix=="function"?DOMMatrix:WebKitCSSMatrix)(t+"");return r.isIdentity?Xr:Ro(r.a,r.b,r.c,r.d,r.e,r.f)}function La(t){return t==null?Xr:(Fr||(Fr=document.createElementNS("http://www.w3.org/2000/svg","g")),Fr.setAttribute("transform",t),(t=Fr.transform.baseVal.consolidate())?(t=t.matrix,Ro(t.a,t.b,t.c,t.d,t.e,t.f)):Xr)}function Da(t,r,o,e){function a(d){return d.length?d.pop()+" ":""}function i(d,m,p,b,f,u){if(d!==p||m!==b){var k=f.push("translate(",null,r,null,o);u.push({i:k-4,x:O(d,p)},{i:k-2,x:O(m,b)})}else(p||b)&&f.push("translate("+p+r+b+o)}function n(d,m,p,b){d!==m?(d-m>180?m+=360:m-d>180&&(d+=360),b.push({i:p.push(a(p)+"rotate(",null,e)-2,x:O(d,m)})):m&&p.push(a(p)+"rotate("+m+e)}function s(d,m,p,b){d!==m?b.push({i:p.push(a(p)+"skewX(",null,e)-2,x:O(d,m)}):m&&p.push(a(p)+"skewX("+m+e)}function l(d,m,p,b,f,u){if(d!==p||m!==b){var k=f.push(a(f)+"scale(",null,",",null,")");u.push({i:k-4,x:O(d,p)},{i:k-2,x:O(m,b)})}else(p!==1||b!==1)&&f.push(a(f)+"scale("+p+","+b+")")}return function(d,m){var p=[],b=[];return d=t(d),m=t(m),i(d.translateX,d.translateY,m.translateX,m.translateY,p,b),n(d.rotate,m.rotate,p,b),s(d.skewX,m.skewX,p,b),l(d.scaleX,d.scaleY,m.scaleX,m.scaleY,p,b),d=m=null,function(f){for(var u=-1,k=b.length,A;++u<k;)p[(A=b[u]).i]=A.x(f);return p.join("")}}}var No=Da(Oa,"px, ","px)","deg)"),Bo=Da(La,", ",")",")");var Gs=1e-12;function Va(t){return((t=Math.exp(t))+1/t)/2}function Ps(t){return((t=Math.exp(t))-1/t)/2}function Os(t){return((t=Math.exp(2*t))-1)/(t+1)}var Co=function t(r,o,e){function a(i,n){var s=i[0],l=i[1],d=i[2],m=n[0],p=n[1],b=n[2],f=m-s,u=p-l,k=f*f+u*u,A,x;if(k<Gs)x=Math.log(b/d)/r,A=function(J){return[s+J*f,l+J*u,d*Math.exp(r*J*x)]};else{var I=Math.sqrt(k),M=(b*b-d*d+e*k)/(2*d*o*I),G=(b*b-d*d-e*k)/(2*b*o*I),$=Math.log(Math.sqrt(M*M+1)-M),q=Math.log(Math.sqrt(G*G+1)-G);x=(q-$)/r,A=function(J){var xt=J*x,Gt=Va($),wt=d/(o*I)*(Gt*Os(r*xt+$)-Ps($));return[s+wt*f,l+wt*u,d*Gt/Va(r*xt+$)]}}return A.duration=x*1e3*r/Math.SQRT2,A}return a.rho=function(i){var n=Math.max(.001,+i),s=n*n,l=s*s;return t(n,s,l)},a}(Math.SQRT2,2,4);var Vt=0,pr=0,mr=0,qa=1e3,Wr,cr,Kr=0,St=0,Zr=0,br=typeof performance=="object"&&performance.now?performance:Date,Ua=typeof window=="object"&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function gr(){return St||(Ua(Ls),St=br.now()+Zr)}function Ls(){St=0}function fr(){this._call=this._time=this._next=null}fr.prototype=Qr.prototype={constructor:fr,restart:function(t,r,o){if(typeof t!="function")throw new TypeError("callback is not a function");o=(o==null?gr():+o)+(r==null?0:+r),!this._next&&cr!==this&&(cr?cr._next=this:Wr=this,cr=this),this._call=t,this._time=o,Go()},stop:function(){this._call&&(this._call=null,this._time=1/0,Go())}};function Qr(t,r,o){var e=new fr;return e.restart(t,r,o),e}function Ya(){gr(),++Vt;for(var t=Wr,r;t;)(r=St-t._time)>=0&&t._call.call(void 0,r),t=t._next;--Vt}function Ha(){St=(Kr=br.now())+Zr,Vt=pr=0;try{Ya()}finally{Vt=0,Vs(),St=0}}function Ds(){var t=br.now(),r=t-Kr;r>qa&&(Zr-=r,Kr=t)}function Vs(){for(var t,r=Wr,o,e=1/0;r;)r._call?(e>r._time&&(e=r._time),t=r,r=r._next):(o=r._next,r._next=null,r=t?t._next=o:Wr=o);cr=t,Go(e)}function Go(t){if(!Vt){pr&&(pr=clearTimeout(pr));var r=t-St;r>24?(t<1/0&&(pr=setTimeout(Ha,t-br.now()-Zr)),mr&&(mr=clearInterval(mr))):(mr||(Kr=br.now(),mr=setInterval(Ds,qa)),Vt=1,Ua(Ha))}}function Jr(t,r,o){var e=new fr;return r=r==null?0:+r,e.restart(a=>{e.stop(),t(a+r)},r,o),e}var Hs=Jt("start","end","cancel","interrupt"),qs=[],Wa=0,Xa=1,ro=2,to=3,Fa=4,oo=5,ur=6;function gt(t,r,o,e,a,i){var n=t.__transition;if(!n)t.__transition={};else if(o in n)return;Us(t,o,{name:r,index:e,group:a,on:Hs,tween:qs,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:Wa})}function hr(t,r){var o=R(t,r);if(o.state>Wa)throw new Error("too late; already scheduled");return o}function L(t,r){var o=R(t,r);if(o.state>to)throw new Error("too late; already running");return o}function R(t,r){var o=t.__transition;if(!o||!(o=o[r]))throw new Error("transition not found");return o}function Us(t,r,o){var e=t.__transition,a;e[r]=o,o.timer=Qr(i,0,o.time);function i(d){o.state=Xa,o.timer.restart(n,o.delay,o.time),o.delay<=d&&n(d-o.delay)}function n(d){var m,p,b,f;if(o.state!==Xa)return l();for(m in e)if(f=e[m],f.name===o.name){if(f.state===to)return Jr(n);f.state===Fa?(f.state=ur,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete e[m]):+m<r&&(f.state=ur,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete e[m])}if(Jr(function(){o.state===to&&(o.state=Fa,o.timer.restart(s,o.delay,o.time),s(d))}),o.state=ro,o.on.call("start",t,t.__data__,o.index,o.group),o.state===ro){for(o.state=to,a=new Array(b=o.tween.length),m=0,p=-1;m<b;++m)(f=o.tween[m].value.call(t,t.__data__,o.index,o.group))&&(a[++p]=f);a.length=p+1}}function s(d){for(var m=d<o.duration?o.ease.call(null,d/o.duration):(o.timer.restart(l),o.state=oo,1),p=-1,b=a.length;++p<b;)a[p].call(t,m);o.state===oo&&(o.on.call("end",t,t.__data__,o.index,o.group),l())}function l(){o.state=ur,o.timer.stop(),delete e[r];for(var d in e)return;delete t.__transition}}function ut(t,r){var o=t.__transition,e,a,i=!0,n;if(o){r=r==null?null:r+"";for(n in o){if((e=o[n]).name!==r){i=!1;continue}a=e.state>ro&&e.state<oo,e.state=ur,e.timer.stop(),e.on.call(a?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[n]}i&&delete t.__transition}}function Ka(t){return this.each(function(){ut(this,t)})}function Ys(t,r){var o,e;return function(){var a=L(this,t),i=a.tween;if(i!==o){e=o=i;for(var n=0,s=e.length;n<s;++n)if(e[n].name===r){e=e.slice(),e.splice(n,1);break}}a.tween=e}}function Xs(t,r,o){var e,a;if(typeof o!="function")throw new Error;return function(){var i=L(this,t),n=i.tween;if(n!==e){a=(e=n).slice();for(var s={name:r,value:o},l=0,d=a.length;l<d;++l)if(a[l].name===r){a[l]=s;break}l===d&&a.push(s)}i.tween=a}}function Za(t,r){var o=this._id;if(t+="",arguments.length<2){for(var e=R(this.node(),o).tween,a=0,i=e.length,n;a<i;++a)if((n=e[a]).name===t)return n.value;return null}return this.each((r==null?Ys:Xs)(o,t,r))}function Ht(t,r,o){var e=t._id;return t.each(function(){var a=L(this,e);(a.value||(a.value={}))[r]=o.apply(this,arguments)}),function(a){return R(a,e).value[r]}}function eo(t,r){var o;return(typeof r=="number"?O:r instanceof K?At:(o=K(r))?(r=o,At):dr)(t,r)}function Fs(t){return function(){this.removeAttribute(t)}}function Ws(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Ks(t,r,o){var e,a=o+"",i;return function(){var n=this.getAttribute(t);return n===a?null:n===e?i:i=r(e=n,o)}}function Zs(t,r,o){var e,a=o+"",i;return function(){var n=this.getAttributeNS(t.space,t.local);return n===a?null:n===e?i:i=r(e=n,o)}}function Qs(t,r,o){var e,a,i;return function(){var n,s=o(this),l;return s==null?void this.removeAttribute(t):(n=this.getAttribute(t),l=s+"",n===l?null:n===e&&l===a?i:(a=l,i=r(e=n,s)))}}function Js(t,r,o){var e,a,i;return function(){var n,s=o(this),l;return s==null?void this.removeAttributeNS(t.space,t.local):(n=this.getAttributeNS(t.space,t.local),l=s+"",n===l?null:n===e&&l===a?i:(a=l,i=r(e=n,s)))}}function Qa(t,r){var o=dt(t),e=o==="transform"?Bo:eo;return this.attrTween(t,typeof r=="function"?(o.local?Js:Qs)(o,e,Ht(this,"attr."+t,r)):r==null?(o.local?Ws:Fs)(o):(o.local?Zs:Ks)(o,e,r))}function tl(t,r){return function(o){this.setAttribute(t,r.call(this,o))}}function rl(t,r){return function(o){this.setAttributeNS(t.space,t.local,r.call(this,o))}}function ol(t,r){var o,e;function a(){var i=r.apply(this,arguments);return i!==e&&(o=(e=i)&&rl(t,i)),o}return a._value=r,a}function el(t,r){var o,e;function a(){var i=r.apply(this,arguments);return i!==e&&(o=(e=i)&&tl(t,i)),o}return a._value=r,a}function Ja(t,r){var o="attr."+t;if(arguments.length<2)return(o=this.tween(o))&&o._value;if(r==null)return this.tween(o,null);if(typeof r!="function")throw new Error;var e=dt(t);return this.tween(o,(e.local?ol:el)(e,r))}function al(t,r){return function(){hr(this,t).delay=+r.apply(this,arguments)}}function il(t,r){return r=+r,function(){hr(this,t).delay=r}}function ti(t){var r=this._id;return arguments.length?this.each((typeof t=="function"?al:il)(r,t)):R(this.node(),r).delay}function nl(t,r){return function(){L(this,t).duration=+r.apply(this,arguments)}}function sl(t,r){return r=+r,function(){L(this,t).duration=r}}function ri(t){var r=this._id;return arguments.length?this.each((typeof t=="function"?nl:sl)(r,t)):R(this.node(),r).duration}function ll(t,r){if(typeof r!="function")throw new Error;return function(){L(this,t).ease=r}}function oi(t){var r=this._id;return arguments.length?this.each(ll(r,t)):R(this.node(),r).ease}function dl(t,r){return function(){var o=r.apply(this,arguments);if(typeof o!="function")throw new Error;L(this,t).ease=o}}function ei(t){if(typeof t!="function")throw new Error;return this.each(dl(this._id,t))}function ai(t){typeof t!="function"&&(t=or(t));for(var r=this._groups,o=r.length,e=new Array(o),a=0;a<o;++a)for(var i=r[a],n=i.length,s=e[a]=[],l,d=0;d<n;++d)(l=i[d])&&t.call(l,l.__data__,d,i)&&s.push(l);return new D(e,this._parents,this._name,this._id)}function ii(t){if(t._id!==this._id)throw new Error;for(var r=this._groups,o=t._groups,e=r.length,a=o.length,i=Math.min(e,a),n=new Array(e),s=0;s<i;++s)for(var l=r[s],d=o[s],m=l.length,p=n[s]=new Array(m),b,f=0;f<m;++f)(b=l[f]||d[f])&&(p[f]=b);for(;s<e;++s)n[s]=r[s];return new D(n,this._parents,this._name,this._id)}function ml(t){return(t+"").trim().split(/^|\s+/).every(function(r){var o=r.indexOf(".");return o>=0&&(r=r.slice(0,o)),!r||r==="start"})}function pl(t,r,o){var e,a,i=ml(r)?hr:L;return function(){var n=i(this,t),s=n.on;s!==e&&(a=(e=s).copy()).on(r,o),n.on=a}}function ni(t,r){var o=this._id;return arguments.length<2?R(this.node(),o).on.on(t):this.each(pl(o,t,r))}function cl(t){return function(){var r=this.parentNode;for(var o in this.__transition)if(+o!==t)return;r&&r.removeChild(this)}}function si(){return this.on("end.remove",cl(this._id))}function li(t){var r=this._name,o=this._id;typeof t!="function"&&(t=kt(t));for(var e=this._groups,a=e.length,i=new Array(a),n=0;n<a;++n)for(var s=e[n],l=s.length,d=i[n]=new Array(l),m,p,b=0;b<l;++b)(m=s[b])&&(p=t.call(m,m.__data__,b,s))&&("__data__"in m&&(p.__data__=m.__data__),d[b]=p,gt(d[b],r,o,b,d,R(m,o)));return new D(i,this._parents,r,o)}function di(t){var r=this._name,o=this._id;typeof t!="function"&&(t=rr(t));for(var e=this._groups,a=e.length,i=[],n=[],s=0;s<a;++s)for(var l=e[s],d=l.length,m,p=0;p<d;++p)if(m=l[p]){for(var b=t.call(m,m.__data__,p,l),f,u=R(m,o),k=0,A=b.length;k<A;++k)(f=b[k])&&gt(f,r,o,k,b,u);i.push(b),n.push(m)}return new D(i,n,r,o)}var bl=mt.prototype.constructor;function mi(){return new bl(this._groups,this._parents)}function fl(t,r){var o,e,a;return function(){var i=ft(this,t),n=(this.style.removeProperty(t),ft(this,t));return i===n?null:i===o&&n===e?a:a=r(o=i,e=n)}}function pi(t){return function(){this.style.removeProperty(t)}}function gl(t,r,o){var e,a=o+"",i;return function(){var n=ft(this,t);return n===a?null:n===e?i:i=r(e=n,o)}}function ul(t,r,o){var e,a,i;return function(){var n=ft(this,t),s=o(this),l=s+"";return s==null&&(l=s=(this.style.removeProperty(t),ft(this,t))),n===l?null:n===e&&l===a?i:(a=l,i=r(e=n,s))}}function hl(t,r){var o,e,a,i="style."+r,n="end."+i,s;return function(){var l=L(this,t),d=l.on,m=l.value[i]==null?s||(s=pi(r)):void 0;(d!==o||a!==m)&&(e=(o=d).copy()).on(n,a=m),l.on=e}}function ci(t,r,o){var e=(t+="")=="transform"?No:eo;return r==null?this.styleTween(t,fl(t,e)).on("end.style."+t,pi(t)):typeof r=="function"?this.styleTween(t,ul(t,e,Ht(this,"style."+t,r))).each(hl(this._id,t)):this.styleTween(t,gl(t,e,r),o).on("end.style."+t,null)}function vl(t,r,o){return function(e){this.style.setProperty(t,r.call(this,e),o)}}function xl(t,r,o){var e,a;function i(){var n=r.apply(this,arguments);return n!==a&&(e=(a=n)&&vl(t,n,o)),e}return i._value=r,i}function bi(t,r,o){var e="style."+(t+="");if(arguments.length<2)return(e=this.tween(e))&&e._value;if(r==null)return this.tween(e,null);if(typeof r!="function")throw new Error;return this.tween(e,xl(t,r,o??""))}function wl(t){return function(){this.textContent=t}}function yl(t){return function(){var r=t(this);this.textContent=r??""}}function fi(t){return this.tween("text",typeof t=="function"?yl(Ht(this,"text",t)):wl(t==null?"":t+""))}function kl(t){return function(r){this.textContent=t.call(this,r)}}function _l(t){var r,o;function e(){var a=t.apply(this,arguments);return a!==o&&(r=(o=a)&&kl(a)),r}return e._value=t,e}function gi(t){var r="text";if(arguments.length<1)return(r=this.tween(r))&&r._value;if(t==null)return this.tween(r,null);if(typeof t!="function")throw new Error;return this.tween(r,_l(t))}function ui(){for(var t=this._name,r=this._id,o=ao(),e=this._groups,a=e.length,i=0;i<a;++i)for(var n=e[i],s=n.length,l,d=0;d<s;++d)if(l=n[d]){var m=R(l,r);gt(l,t,o,d,n,{time:m.time+m.delay+m.duration,delay:0,duration:m.duration,ease:m.ease})}return new D(e,this._parents,t,o)}function hi(){var t,r,o=this,e=o._id,a=o.size();return new Promise(function(i,n){var s={value:n},l={value:function(){--a===0&&i()}};o.each(function(){var d=L(this,e),m=d.on;m!==t&&(r=(t=m).copy(),r._.cancel.push(s),r._.interrupt.push(s),r._.end.push(l)),d.on=r}),a===0&&i()})}var zl=0;function D(t,r,o,e){this._groups=t,this._parents=r,this._name=o,this._id=e}function vi(t){return mt().transition(t)}function ao(){return++zl}var ct=mt.prototype;D.prototype=vi.prototype={constructor:D,select:li,selectAll:di,selectChild:ct.selectChild,selectChildren:ct.selectChildren,filter:ai,merge:ii,selection:mi,transition:ui,call:ct.call,nodes:ct.nodes,node:ct.node,size:ct.size,empty:ct.empty,each:ct.each,on:ni,attr:Qa,attrTween:Ja,style:ci,styleTween:bi,text:fi,textTween:gi,remove:si,tween:Za,delay:ti,duration:ri,ease:oi,easeVarying:ei,end:hi,[Symbol.iterator]:ct[Symbol.iterator]};function io(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}var Al={time:null,delay:0,duration:250,ease:io};function $l(t,r){for(var o;!(o=t.__transition)||!(o=o[r]);)if(!(t=t.parentNode))throw new Error(`transition ${r} not found`);return o}function xi(t){var r,o;t instanceof D?(r=t._id,t=t._name):(r=ao(),(o=Al).time=gr(),t=t==null?null:t+"");for(var e=this._groups,a=e.length,i=0;i<a;++i)for(var n=e[i],s=n.length,l,d=0;d<s;++d)(l=n[d])&&gt(l,t,r,d,n,o||$l(l,r));return new D(e,this._parents,t,r)}mt.prototype.interrupt=Ka;mt.prototype.transition=xi;var{abs:tg,max:rg,min:og}=Math;function wi(t){return[+t[0],+t[1]]}function Sl(t){return[wi(t[0]),wi(t[1])]}var eg={name:"x",handles:["w","e"].map(Po),input:function(t,r){return t==null?null:[[+t[0],r[0][1]],[+t[1],r[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},ag={name:"y",handles:["n","s"].map(Po),input:function(t,r){return t==null?null:[[r[0][0],+t[0]],[r[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},ig={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(Po),input:function(t){return t==null?null:Sl(t)},output:function(t){return t}};function Po(t){return{type:t}}var Oo=Math.PI,Lo=2*Oo,Mt=1e-6,Ml=Lo-Mt;function yi(t){this._+=t[0];for(let r=1,o=t.length;r<o;++r)this._+=arguments[r]+t[r]}function El(t){let r=Math.floor(t);if(!(r>=0))throw new Error(`invalid digits: ${t}`);if(r>15)return yi;let o=10**r;return function(e){this._+=e[0];for(let a=1,i=e.length;a<i;++a)this._+=Math.round(arguments[a]*o)/o+e[a]}}var Et=class{constructor(r){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=r==null?yi:El(r)}moveTo(r,o){this._append`M${this._x0=this._x1=+r},${this._y0=this._y1=+o}`}closePath(){this._x1!==null&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(r,o){this._append`L${this._x1=+r},${this._y1=+o}`}quadraticCurveTo(r,o,e,a){this._append`Q${+r},${+o},${this._x1=+e},${this._y1=+a}`}bezierCurveTo(r,o,e,a,i,n){this._append`C${+r},${+o},${+e},${+a},${this._x1=+i},${this._y1=+n}`}arcTo(r,o,e,a,i){if(r=+r,o=+o,e=+e,a=+a,i=+i,i<0)throw new Error(`negative radius: ${i}`);let n=this._x1,s=this._y1,l=e-r,d=a-o,m=n-r,p=s-o,b=m*m+p*p;if(this._x1===null)this._append`M${this._x1=r},${this._y1=o}`;else if(b>Mt)if(!(Math.abs(p*l-d*m)>Mt)||!i)this._append`L${this._x1=r},${this._y1=o}`;else{let f=e-n,u=a-s,k=l*l+d*d,A=f*f+u*u,x=Math.sqrt(k),I=Math.sqrt(b),M=i*Math.tan((Oo-Math.acos((k+b-A)/(2*x*I)))/2),G=M/I,$=M/x;Math.abs(G-1)>Mt&&this._append`L${r+G*m},${o+G*p}`,this._append`A${i},${i},0,0,${+(p*f>m*u)},${this._x1=r+$*l},${this._y1=o+$*d}`}}arc(r,o,e,a,i,n){if(r=+r,o=+o,e=+e,n=!!n,e<0)throw new Error(`negative radius: ${e}`);let s=e*Math.cos(a),l=e*Math.sin(a),d=r+s,m=o+l,p=1^n,b=n?a-i:i-a;this._x1===null?this._append`M${d},${m}`:(Math.abs(this._x1-d)>Mt||Math.abs(this._y1-m)>Mt)&&this._append`L${d},${m}`,e&&(b<0&&(b=b%Lo+Lo),b>Ml?this._append`A${e},${e},0,1,${p},${r-s},${o-l}A${e},${e},0,1,${p},${this._x1=d},${this._y1=m}`:b>Mt&&this._append`A${e},${e},0,${+(b>=Oo)},${p},${this._x1=r+e*Math.cos(i)},${this._y1=o+e*Math.sin(i)}`)}rect(r,o,e,a){this._append`M${this._x0=this._x1=+r},${this._y0=this._y1=+o}h${e=+e}v${+a}h${-e}Z`}toString(){return this._}};function ki(){return new Et}ki.prototype=Et.prototype;function _i(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)}function It(t,r){if((o=(t=r?t.toExponential(r-1):t.toExponential()).indexOf("e"))<0)return null;var o,e=t.slice(0,o);return[e.length>1?e[0]+e.slice(2):e,+t.slice(o+1)]}function ot(t){return t=It(Math.abs(t)),t?t[1]:NaN}function zi(t,r){return function(o,e){for(var a=o.length,i=[],n=0,s=t[0],l=0;a>0&&s>0&&(l+s+1>e&&(s=Math.max(1,e-l)),i.push(o.substring(a-=s,a+s)),!((l+=s+1)>e));)s=t[n=(n+1)%t.length];return i.reverse().join(r)}}function Ai(t){return function(r){return r.replace(/[0-9]/g,function(o){return t[+o]})}}var Il=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ht(t){if(!(r=Il.exec(t)))throw new Error("invalid format: "+t);var r;return new no({fill:r[1],align:r[2],sign:r[3],symbol:r[4],zero:r[5],width:r[6],comma:r[7],precision:r[8]&&r[8].slice(1),trim:r[9],type:r[10]})}ht.prototype=no.prototype;function no(t){this.fill=t.fill===void 0?" ":t.fill+"",this.align=t.align===void 0?">":t.align+"",this.sign=t.sign===void 0?"-":t.sign+"",this.symbol=t.symbol===void 0?"":t.symbol+"",this.zero=!!t.zero,this.width=t.width===void 0?void 0:+t.width,this.comma=!!t.comma,this.precision=t.precision===void 0?void 0:+t.precision,this.trim=!!t.trim,this.type=t.type===void 0?"":t.type+""}no.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(this.width===void 0?"":Math.max(1,this.width|0))+(this.comma?",":"")+(this.precision===void 0?"":"."+Math.max(0,this.precision|0))+(this.trim?"~":"")+this.type};function $i(t){t:for(var r=t.length,o=1,e=-1,a;o<r;++o)switch(t[o]){case".":e=a=o;break;case"0":e===0&&(e=o),a=o;break;default:if(!+t[o])break t;e>0&&(e=0);break}return e>0?t.slice(0,e)+t.slice(a+1):t}var Do;function Si(t,r){var o=It(t,r);if(!o)return t+"";var e=o[0],a=o[1],i=a-(Do=Math.max(-8,Math.min(8,Math.floor(a/3)))*3)+1,n=e.length;return i===n?e:i>n?e+new Array(i-n+1).join("0"):i>0?e.slice(0,i)+"."+e.slice(i):"0."+new Array(1-i).join("0")+It(t,Math.max(0,r+i-1))[0]}function Vo(t,r){var o=It(t,r);if(!o)return t+"";var e=o[0],a=o[1];return a<0?"0."+new Array(-a).join("0")+e:e.length>a+1?e.slice(0,a+1)+"."+e.slice(a+1):e+new Array(a-e.length+2).join("0")}var Ho={"%":(t,r)=>(t*100).toFixed(r),b:t=>Math.round(t).toString(2),c:t=>t+"",d:_i,e:(t,r)=>t.toExponential(r),f:(t,r)=>t.toFixed(r),g:(t,r)=>t.toPrecision(r),o:t=>Math.round(t).toString(8),p:(t,r)=>Vo(t*100,r),r:Vo,s:Si,X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function qo(t){return t}var Mi=Array.prototype.map,Ei=["y","z","a","f","p","n","\xB5","m","","k","M","G","T","P","E","Z","Y"];function Ii(t){var r=t.grouping===void 0||t.thousands===void 0?qo:zi(Mi.call(t.grouping,Number),t.thousands+""),o=t.currency===void 0?"":t.currency[0]+"",e=t.currency===void 0?"":t.currency[1]+"",a=t.decimal===void 0?".":t.decimal+"",i=t.numerals===void 0?qo:Ai(Mi.call(t.numerals,String)),n=t.percent===void 0?"%":t.percent+"",s=t.minus===void 0?"\u2212":t.minus+"",l=t.nan===void 0?"NaN":t.nan+"";function d(p){p=ht(p);var b=p.fill,f=p.align,u=p.sign,k=p.symbol,A=p.zero,x=p.width,I=p.comma,M=p.precision,G=p.trim,$=p.type;$==="n"?(I=!0,$="g"):Ho[$]||(M===void 0&&(M=12),G=!0,$="g"),(A||b==="0"&&f==="=")&&(A=!0,b="0",f="=");var q=k==="$"?o:k==="#"&&/[boxX]/.test($)?"0"+$.toLowerCase():"",J=k==="$"?e:/[%p]/.test($)?n:"",xt=Ho[$],Gt=/[defgprs%]/.test($);M=M===void 0?6:/[gprs]/.test($)?Math.max(1,Math.min(21,M)):Math.max(0,Math.min(20,M));function wt(z){var nt=q,V=J,c,h,g;if($==="c")V=xt(z)+V,z="";else{z=+z;var v=z<0||1/z<0;if(z=isNaN(z)?l:xt(Math.abs(z),M),G&&(z=$i(z)),v&&+z==0&&u!=="+"&&(v=!1),nt=(v?u==="("?u:s:u==="-"||u==="("?"":u)+nt,V=($==="s"?Ei[8+Do/3]:"")+V+(v&&u==="("?")":""),Gt){for(c=-1,h=z.length;++c<h;)if(g=z.charCodeAt(c),48>g||g>57){V=(g===46?a+z.slice(c+1):z.slice(c))+V,z=z.slice(0,c);break}}}I&&!A&&(z=r(z,1/0));var y=nt.length+z.length+V.length,w=y<x?new Array(x-y+1).join(b):"";switch(I&&A&&(z=r(w+z,w.length?x-V.length:1/0),w=""),f){case"<":z=nt+z+V+w;break;case"=":z=nt+w+z+V;break;case"^":z=w.slice(0,y=w.length>>1)+nt+z+V+w.slice(y);break;default:z=w+nt+z+V;break}return i(z)}return wt.toString=function(){return p+""},wt}function m(p,b){var f=d((p=ht(p),p.type="f",p)),u=Math.max(-8,Math.min(8,Math.floor(ot(b)/3)))*3,k=Math.pow(10,-u),A=Ei[8+u/3];return function(x){return f(k*x)+A}}return{format:d,formatPrefix:m}}var so,lo,mo;Uo({thousands:",",grouping:[3],currency:["$",""]});function Uo(t){return so=Ii(t),lo=so.format,mo=so.formatPrefix,so}function Yo(t){return Math.max(0,-ot(Math.abs(t)))}function Xo(t,r){return Math.max(0,Math.max(-8,Math.min(8,Math.floor(ot(r)/3)))*3-ot(Math.abs(t)))}function Fo(t,r){return t=Math.abs(t),r=Math.abs(r)-t,Math.max(0,ot(r)-ot(t))+1}function Ti(t,r){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(r).domain(t);break}return this}function Wo(t){return function(){return t}}function Ko(t){return+t}var ji=[0,1];function qt(t){return t}function Zo(t,r){return(r-=t=+t)?function(o){return(o-t)/r}:Wo(isNaN(r)?NaN:.5)}function Tl(t,r){var o;return t>r&&(o=t,t=r,r=o),function(e){return Math.max(t,Math.min(r,e))}}function jl(t,r,o){var e=t[0],a=t[1],i=r[0],n=r[1];return a<e?(e=Zo(a,e),i=o(n,i)):(e=Zo(e,a),i=o(i,n)),function(s){return i(e(s))}}function Rl(t,r,o){var e=Math.min(t.length,r.length)-1,a=new Array(e),i=new Array(e),n=-1;for(t[e]<t[0]&&(t=t.slice().reverse(),r=r.slice().reverse());++n<e;)a[n]=Zo(t[n],t[n+1]),i[n]=o(r[n],r[n+1]);return function(s){var l=yo(t,s,1,e)-1;return i[l](a[l](s))}}function Ri(t,r){return r.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Nl(){var t=ji,r=ji,o=$t,e,a,i,n=qt,s,l,d;function m(){var b=Math.min(t.length,r.length);return n!==qt&&(n=Tl(t[0],t[b-1])),s=b>2?Rl:jl,l=d=null,p}function p(b){return b==null||isNaN(b=+b)?i:(l||(l=s(t.map(e),r,o)))(e(n(b)))}return p.invert=function(b){return n(a((d||(d=s(r,t.map(e),O)))(b)))},p.domain=function(b){return arguments.length?(t=Array.from(b,Ko),m()):t.slice()},p.range=function(b){return arguments.length?(r=Array.from(b),m()):r.slice()},p.rangeRound=function(b){return r=Array.from(b),o=jo,m()},p.clamp=function(b){return arguments.length?(n=b?!0:qt,m()):n!==qt},p.interpolate=function(b){return arguments.length?(o=b,m()):o},p.unknown=function(b){return arguments.length?(i=b,p):i},function(b,f){return e=b,a=f,m()}}function Qo(){return Nl()(qt,qt)}function Jo(t,r,o,e){var a=ko(t,r,o),i;switch(e=ht(e??",f"),e.type){case"s":{var n=Math.max(Math.abs(t),Math.abs(r));return e.precision==null&&!isNaN(i=Xo(a,n))&&(e.precision=i),mo(e,n)}case"":case"e":case"g":case"p":case"r":{e.precision==null&&!isNaN(i=Fo(a,Math.max(Math.abs(t),Math.abs(r))))&&(e.precision=i-(e.type==="e"));break}case"f":case"%":{e.precision==null&&!isNaN(i=Yo(a))&&(e.precision=i-(e.type==="%")*2);break}}return lo(e)}function Bl(t){var r=t.domain;return t.ticks=function(o){var e=r();return jr(e[0],e[e.length-1],o??10)},t.tickFormat=function(o,e){var a=r();return Jo(a[0],a[a.length-1],o??10,e)},t.nice=function(o){o==null&&(o=10);var e=r(),a=0,i=e.length-1,n=e[a],s=e[i],l,d,m=10;for(s<n&&(d=n,n=s,s=d,d=a,a=i,i=d);m-- >0;){if(d=Zt(n,s,o),d===l)return e[a]=n,e[i]=s,r(e);if(d>0)n=Math.floor(n/d)*d,s=Math.ceil(s/d)*d;else if(d<0)n=Math.ceil(n*d)/d,s=Math.floor(s*d)/d;else break;l=d}return t},t}function Tt(){var t=Qo();return t.copy=function(){return Ri(t,Tt())},Ti.apply(t,arguments),Bl(t)}function Ni(t){for(var r=t.length/6|0,o=new Array(r),e=0;e<r;)o[e]="#"+t.slice(e*6,++e*6);return o}var Ut=Ni("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");function vr(t){return function(){return t}}var Z=Math.sqrt;var po=Math.PI,$u=po/2,Bi=2*po;function Ci(t){let r=3;return t.digits=function(o){if(!arguments.length)return r;if(o==null)r=null;else{let e=Math.floor(o);if(!(e>=0))throw new RangeError(`invalid digits: ${o}`);r=e}return t},()=>new Et(r)}var Gi={draw(t,r){let o=Z(r/po);t.moveTo(o,0),t.arc(0,0,o,0,Bi)}};var xr={draw(t,r){let o=Z(r/5)/2;t.moveTo(-3*o,-o),t.lineTo(-o,-o),t.lineTo(-o,-3*o),t.lineTo(o,-3*o),t.lineTo(o,-o),t.lineTo(3*o,-o),t.lineTo(3*o,o),t.lineTo(o,o),t.lineTo(o,3*o),t.lineTo(-o,3*o),t.lineTo(-o,o),t.lineTo(-3*o,o),t.closePath()}};var te=Z(3),wr={draw(t,r){let o=-Z(r/(te*3));t.moveTo(0,o*2),t.lineTo(-te*o,-o),t.lineTo(te*o,-o),t.closePath()}};var U=-.5,Y=Z(3)/2,re=1/Z(12),Cl=(re/2+1)*3,yr={draw(t,r){let o=Z(r/Cl),e=o/2,a=o*re,i=e,n=o*re+o,s=-i,l=n;t.moveTo(e,a),t.lineTo(i,n),t.lineTo(s,l),t.lineTo(U*e-Y*a,Y*e+U*a),t.lineTo(U*i-Y*n,Y*i+U*n),t.lineTo(U*s-Y*l,Y*s+U*l),t.lineTo(U*e+Y*a,U*a-Y*e),t.lineTo(U*i+Y*n,U*n-Y*i),t.lineTo(U*s+Y*l,U*l-Y*s),t.closePath()}};function et(t,r){let o=null,e=Ci(a);t=typeof t=="function"?t:vr(t||Gi),r=typeof r=="function"?r:vr(r===void 0?64:+r);function a(){let i;if(o||(o=i=e()),t.apply(this,arguments).draw(o,+r.apply(this,arguments)),i)return o=null,i+""||null}return a.type=function(i){return arguments.length?(t=typeof i=="function"?i:vr(i),a):t},a.size=function(i){return arguments.length?(r=typeof i=="function"?i:vr(+i),a):r},a.context=function(i){return arguments.length?(o=i??null,a):o},a}var kr=t=>()=>t;function oe(t,{sourceEvent:r,target:o,transform:e,dispatch:a}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:r,enumerable:!0,configurable:!0},target:{value:o,enumerable:!0,configurable:!0},transform:{value:e,enumerable:!0,configurable:!0},_:{value:a}})}function Q(t,r,o){this.k=t,this.x=r,this.y=o}Q.prototype={constructor:Q,scale:function(t){return t===1?this:new Q(this.k*t,this.x,this.y)},translate:function(t,r){return t===0&r===0?this:new Q(this.k,this.x+this.k*t,this.y+this.k*r)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var _r=new Q(1,0,0);ee.prototype=Q.prototype;function ee(t){for(;!t.__zoom;)if(!(t=t.parentNode))return _r;return t.__zoom}function co(t){t.stopImmediatePropagation()}function Yt(t){t.preventDefault(),t.stopImmediatePropagation()}function Pl(t){return(!t.ctrlKey||t.type==="wheel")&&!t.button}function Ol(){var t=this;return t instanceof SVGElement?(t=t.ownerSVGElement||t,t.hasAttribute("viewBox")?(t=t.viewBox.baseVal,[[t.x,t.y],[t.x+t.width,t.y+t.height]]):[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]):[[0,0],[t.clientWidth,t.clientHeight]]}function Pi(){return this.__zoom||_r}function Ll(t){return-t.deltaY*(t.deltaMode===1?.05:t.deltaMode?1:.002)*(t.ctrlKey?10:1)}function Dl(){return navigator.maxTouchPoints||"ontouchstart"in this}function Vl(t,r,o){var e=t.invertX(r[0][0])-o[0][0],a=t.invertX(r[1][0])-o[1][0],i=t.invertY(r[0][1])-o[0][1],n=t.invertY(r[1][1])-o[1][1];return t.translate(a>e?(e+a)/2:Math.min(0,e)||Math.max(0,a),n>i?(i+n)/2:Math.min(0,i)||Math.max(0,n))}function ae(){var t=Pl,r=Ol,o=Vl,e=Ll,a=Dl,i=[0,1/0],n=[[-1/0,-1/0],[1/0,1/0]],s=250,l=Co,d=Jt("start","zoom","end"),m,p,b,f=500,u=150,k=0,A=10;function x(c){c.property("__zoom",Pi).on("wheel.zoom",xt,{passive:!1}).on("mousedown.zoom",Gt).on("dblclick.zoom",wt).filter(a).on("touchstart.zoom",z).on("touchmove.zoom",nt).on("touchend.zoom touchcancel.zoom",V).style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}x.transform=function(c,h,g,v){var y=c.selection?c.selection():c;y.property("__zoom",Pi),c!==y?$(c,h,g,v):y.interrupt().each(function(){q(this,arguments).event(v).start().zoom(null,typeof h=="function"?h.apply(this,arguments):h).end()})},x.scaleBy=function(c,h,g,v){x.scaleTo(c,function(){var y=this.__zoom.k,w=typeof h=="function"?h.apply(this,arguments):h;return y*w},g,v)},x.scaleTo=function(c,h,g,v){x.transform(c,function(){var y=r.apply(this,arguments),w=this.__zoom,_=g==null?G(y):typeof g=="function"?g.apply(this,arguments):g,S=w.invert(_),T=typeof h=="function"?h.apply(this,arguments):h;return o(M(I(w,T),_,S),y,n)},g,v)},x.translateBy=function(c,h,g,v){x.transform(c,function(){return o(this.__zoom.translate(typeof h=="function"?h.apply(this,arguments):h,typeof g=="function"?g.apply(this,arguments):g),r.apply(this,arguments),n)},null,v)},x.translateTo=function(c,h,g,v,y){x.transform(c,function(){var w=r.apply(this,arguments),_=this.__zoom,S=v==null?G(w):typeof v=="function"?v.apply(this,arguments):v;return o(_r.translate(S[0],S[1]).scale(_.k).translate(typeof h=="function"?-h.apply(this,arguments):-h,typeof g=="function"?-g.apply(this,arguments):-g),w,n)},v,y)};function I(c,h){return h=Math.max(i[0],Math.min(i[1],h)),h===c.k?c:new Q(h,c.x,c.y)}function M(c,h,g){var v=h[0]-g[0]*c.k,y=h[1]-g[1]*c.k;return v===c.x&&y===c.y?c:new Q(c.k,v,y)}function G(c){return[(+c[0][0]+ +c[1][0])/2,(+c[0][1]+ +c[1][1])/2]}function $(c,h,g,v){c.on("start.zoom",function(){q(this,arguments).event(v).start()}).on("interrupt.zoom end.zoom",function(){q(this,arguments).event(v).end()}).tween("zoom",function(){var y=this,w=arguments,_=q(y,w).event(v),S=r.apply(y,w),T=g==null?G(S):typeof g=="function"?g.apply(y,w):g,tt=Math.max(S[1][0]-S[0][0],S[1][1]-S[0][1]),P=y.__zoom,X=typeof h=="function"?h.apply(y,w):h,st=l(P.invert(T).concat(tt/P.k),X.invert(T).concat(tt/X.k));return function(F){if(F===1)F=X;else{var lt=st(F),vo=tt/lt[2];F=new Q(vo,T[0]-lt[0]*vo,T[1]-lt[1]*vo)}_.zoom(null,F)}})}function q(c,h,g){return!g&&c.__zooming||new J(c,h)}function J(c,h){this.that=c,this.args=h,this.active=0,this.sourceEvent=null,this.extent=r.apply(c,h),this.taps=0}J.prototype={event:function(c){return c&&(this.sourceEvent=c),this},start:function(){return++this.active===1&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(c,h){return this.mouse&&c!=="mouse"&&(this.mouse[1]=h.invert(this.mouse[0])),this.touch0&&c!=="touch"&&(this.touch0[1]=h.invert(this.touch0[0])),this.touch1&&c!=="touch"&&(this.touch1[1]=h.invert(this.touch1[0])),this.that.__zoom=h,this.emit("zoom"),this},end:function(){return--this.active===0&&(delete this.that.__zooming,this.emit("end")),this},emit:function(c){var h=B(this.that).datum();d.call(c,this.that,new oe(c,{sourceEvent:this.sourceEvent,target:x,type:c,transform:this.that.__zoom,dispatch:d}),h)}};function xt(c,...h){if(!t.apply(this,arguments))return;var g=q(this,h).event(c),v=this.__zoom,y=Math.max(i[0],Math.min(i[1],v.k*Math.pow(2,e.apply(this,arguments)))),w=pt(c);if(g.wheel)(g.mouse[0][0]!==w[0]||g.mouse[0][1]!==w[1])&&(g.mouse[1]=v.invert(g.mouse[0]=w)),clearTimeout(g.wheel);else{if(v.k===y)return;g.mouse=[w,v.invert(w)],ut(this),g.start()}Yt(c),g.wheel=setTimeout(_,u),g.zoom("mouse",o(M(I(v,y),g.mouse[0],g.mouse[1]),g.extent,n));function _(){g.wheel=null,g.end()}}function Gt(c,...h){if(b||!t.apply(this,arguments))return;var g=c.currentTarget,v=q(this,h,!0).event(c),y=B(c.view).on("mousemove.zoom",T,!0).on("mouseup.zoom",tt,!0),w=pt(c,g),_=c.clientX,S=c.clientY;Ao(c.view),co(c),v.mouse=[w,this.__zoom.invert(w)],ut(this),v.start();function T(P){if(Yt(P),!v.moved){var X=P.clientX-_,st=P.clientY-S;v.moved=X*X+st*st>k}v.event(P).zoom("mouse",o(M(v.that.__zoom,v.mouse[0]=pt(P,g),v.mouse[1]),v.extent,n))}function tt(P){y.on("mousemove.zoom mouseup.zoom",null),$o(P.view,v.moved),Yt(P),v.event(P).end()}}function wt(c,...h){if(t.apply(this,arguments)){var g=this.__zoom,v=pt(c.changedTouches?c.changedTouches[0]:c,this),y=g.invert(v),w=g.k*(c.shiftKey?.5:2),_=o(M(I(g,w),v,y),r.apply(this,h),n);Yt(c),s>0?B(this).transition().duration(s).call($,_,v,c):B(this).call(x.transform,_,v,c)}}function z(c,...h){if(t.apply(this,arguments)){var g=c.touches,v=g.length,y=q(this,h,c.changedTouches.length===v).event(c),w,_,S,T;for(co(c),_=0;_<v;++_)S=g[_],T=pt(S,this),T=[T,this.__zoom.invert(T),S.identifier],y.touch0?!y.touch1&&y.touch0[2]!==T[2]&&(y.touch1=T,y.taps=0):(y.touch0=T,w=!0,y.taps=1+!!m);m&&(m=clearTimeout(m)),w&&(y.taps<2&&(p=T[0],m=setTimeout(function(){m=null},f)),ut(this),y.start())}}function nt(c,...h){if(this.__zooming){var g=q(this,h).event(c),v=c.changedTouches,y=v.length,w,_,S,T;for(Yt(c),w=0;w<y;++w)_=v[w],S=pt(_,this),g.touch0&&g.touch0[2]===_.identifier?g.touch0[0]=S:g.touch1&&g.touch1[2]===_.identifier&&(g.touch1[0]=S);if(_=g.that.__zoom,g.touch1){var tt=g.touch0[0],P=g.touch0[1],X=g.touch1[0],st=g.touch1[1],F=(F=X[0]-tt[0])*F+(F=X[1]-tt[1])*F,lt=(lt=st[0]-P[0])*lt+(lt=st[1]-P[1])*lt;_=I(_,Math.sqrt(F/lt)),S=[(tt[0]+X[0])/2,(tt[1]+X[1])/2],T=[(P[0]+st[0])/2,(P[1]+st[1])/2]}else if(g.touch0)S=g.touch0[0],T=g.touch0[1];else return;g.zoom("touch",o(M(_,S,T),g.extent,n))}}function V(c,...h){if(this.__zooming){var g=q(this,h).event(c),v=c.changedTouches,y=v.length,w,_;for(co(c),b&&clearTimeout(b),b=setTimeout(function(){b=null},f),w=0;w<y;++w)_=v[w],g.touch0&&g.touch0[2]===_.identifier?delete g.touch0:g.touch1&&g.touch1[2]===_.identifier&&delete g.touch1;if(g.touch1&&!g.touch0&&(g.touch0=g.touch1,delete g.touch1),g.touch0)g.touch0[1]=this.__zoom.invert(g.touch0[0]);else if(g.end(),g.taps===2&&(_=pt(_,this),Math.hypot(p[0]-_[0],p[1]-_[1])<A)){var S=B(this).on("dblclick.zoom");S&&S.apply(this,arguments)}}}return x.wheelDelta=function(c){return arguments.length?(e=typeof c=="function"?c:kr(+c),x):e},x.filter=function(c){return arguments.length?(t=typeof c=="function"?c:kr(!!c),x):t},x.touchable=function(c){return arguments.length?(a=typeof c=="function"?c:kr(!!c),x):a},x.extent=function(c){return arguments.length?(r=typeof c=="function"?c:kr([[+c[0][0],+c[0][1]],[+c[1][0],+c[1][1]]]),x):r},x.scaleExtent=function(c){return arguments.length?(i[0]=+c[0],i[1]=+c[1],x):[i[0],i[1]]},x.translateExtent=function(c){return arguments.length?(n[0][0]=+c[0][0],n[1][0]=+c[1][0],n[0][1]=+c[0][1],n[1][1]=+c[1][1],x):[[n[0][0],n[0][1]],[n[1][0],n[1][1]]]},x.constrain=function(c){return arguments.length?(o=c,x):o},x.duration=function(c){return arguments.length?(s=+c,x):s},x.interpolate=function(c){return arguments.length?(l=c,x):l},x.on=function(){var c=d.on.apply(d,arguments);return c===d?x:c},x.clickDistance=function(c){return arguments.length?(k=(c=+c)*c,x):Math.sqrt(k)},x.tapDistance=function(c){return arguments.length?(A=+c,x):A},x}var ie=class{constructor(r){this.showUnst=!0;this.group=r.append("g").attr("class","originalEmbedding")}render(r,o){this.group.selectAll("circle").data(r).join("circle").attr("id",e=>`circle-${e.id.toString()}`).attr("cx",e=>o.xScale(e.x)).attr("cy",e=>o.yScale(e.y)).attr("r",1).attr("fill",e=>o.colorScale[e.label]).attr("id",e=>`circle-${e.id.toString()}`)}setVisibility(r,o){if(console.log("setVisibility",r),this.showUnst=r,this.showUnst){this.group.selectAll("circle").attr("visibility","visible");return}o.forEach(e=>{this.group.selectAll(`circle[id="circle-${e.id.toString()}"]`).attr("visibility","hidden")})}updateUnstEmbedding(r){this.group.selectAll("circle").attr("visibility","visible"),this.showUnst||r.forEach(o=>{this.group.selectAll(`circle[id="circle-${o.toString()}"]`).attr("visibility","hidden")})}},Oi=ie;var ne=(t,r,o,e,a)=>{let[i,n]=Kt(t,f=>f.x),[s,l]=Kt(t,f=>f.y),d=Tt().domain([i*1.1,n*1.1]).range([0,r]),m=Tt().domain([s*1.1,l*1.1]).range([o,0]),p={};return e.length===0&&Object.keys(a).length===0?p.None=Ut[0]:e.length?e.forEach((f,u)=>{p[f]=Ut[u]}):p=a,{xScale:d,yScale:m,colorScale:p,range:{xMin:i,xMax:n,yMin:s,yMax:l}}};var bt=t=>{let r=t.get("embedding_id"),[o,e]=[t.get("width"),t.get("height")],{original_embedding:a,ghost_embedding:i,n_ghosts:n,legend:s,colors:l}=t.get("embedding_set")[r],d=ne(a,o,e,s,l),m=d.range,p=t.get("distance"),b=t.get("sensitivity"),f=Math.floor(b*(n-1));console.log(f);let u=p*Qt([m.xMax-m.xMin,m.yMax-m.yMin]);console.log(f,u);let k=a.filter(A=>A.radii[f]>u);return{origEmb:a,ghostEmb:i,unstEmb:k,scales:d,range:m,scaledDist:u,scaledSens:f,legend:s,colors:l}};var Xt=(t,r,o)=>{let e={...t.get("unstableInfo")};return e.unstableEmb=r,e.numUnstables=r.length,e.percentUnstables=r.length/o*100,t.set("unstableInfo",e),t.save_changes(),e};var zr=(t,r)=>{let o=r.filter(a=>!t.includes(a)),e=t.filter(a=>!r.includes(a));return[o,e]};var se=class{constructor(r){this.unstableList=[];this.group=r.append("g").attr("class","ghostEmbedding")}renderGhosts(r,o,e){let a=o.find(n=>n.id===r)?.coords||[],i=o.find(n=>n.id===r)?.label||"";this.group.append("g").attr("id",`ghost-${r}`).selectAll("path").data(a).join("path").attr("pointer-events","none").attr("stroke-width",1).attr("d",et(wr).size(150)).attr("fill",e.colorScale[i]).attr("transform",n=>`translate(${e.xScale(n.x)},${e.yScale(n.y)})`).attr("stroke","black")}removeGhosts(r){this.group.selectAll(`#ghost-${r}`).remove()}reset(){this.group.selectAll("g").remove(),this.unstableList=[]}setVisibility(r){this.group.attr("visibility",r?"visible":"hidden")}render(r,o,e){let[a,i]=zr(this.unstableList,e);a.forEach(n=>this.renderGhosts(n,r,o)),i.forEach(n=>this.removeGhosts(n)),this.unstableList=e}},Li=se;var le=class{constructor(r){this.show=!0;this.group=r.append("g").attr("class","unstableEmbedding")}render(r,o,e){let{xScale:a,yScale:i,colorScale:n}=o;this.group.selectAll("path").data(r).join("path").attr("d",et(xr).size(100)).attr("transform",s=>`translate(${a(s.x)},${i(s.y)})`).attr("fill",s=>n[s.label]).attr("pointer-events","all").attr("stroke","black").attr("stroke-width",1.5).attr("visibility",this.show?"visible":"hidden").attr("id",s=>`unstPoint-${s.id.toString()}`).on("click",(s,l)=>{s.stopPropagation(),e(l.id)})}setVisibility(r){this.show=r,this.show?this.group.selectAll("path").attr("visibility","visible").attr("pointer-events","all"):this.group.selectAll("path").attr("visibility","hidden").attr("pointer-events","none")}},Di=le;var de=class{constructor(r){this.unstableList=[];this.group=r.append("g").attr("class","neighborEmbedding")}renderNeighbors(r,o,e){let{xScale:a,yScale:i,colorScale:n}=e,s=o[r].neighbors.map(l=>o[l]);this.group.append("g").attr("id",`neighbor-${r}`).selectAll("path").data(s).join("path").attr("pointer-events","none").attr("stroke-width",1).attr("d",et(yr).size(150)).attr("transform",l=>`translate(${a(l.x)},${i(l.y)})`).attr("fill",l=>n[l.label]).attr("stroke","black")}removeNeighbors(r){this.group.selectAll(`#neighbor-${r}`).remove()}reset(){this.group.selectAll("g").remove(),this.unstableList=[]}setVisibility(r){this.group.attr("visibility",r?"visible":"hidden")}render(r,o,e){let[a,i]=zr(this.unstableList,e);a.forEach(n=>this.renderNeighbors(n,r,o)),i.forEach(n=>this.removeNeighbors(n)),this.unstableList=e}},Vi=de;var me=class{constructor(r,o){this.width=r;this.height=o;this.svg=this.createSVG(),this.groupContainer=this.svg.append("g"),this.originalEmbedding=new Oi(this.groupContainer),this.ghostEmbedding=new Li(this.groupContainer),this.neighborEmbedding=new Vi(this.groupContainer),this.unstableEmbedding=new Di(this.groupContainer)}createSVG(){return Ot("svg").attr("class","scatterplot").attr("width",`${this.width}px`).attr("height",`${this.height}px`).on("contextmenu",r=>{r.preventDefault(),this.resetViewPoint()})}resetViewPoint(){this.groupContainer.transition().duration(750).attr("transform","translate(0,0) scale(1)")}updateEmbedding(r,o,e,a){this.originalEmbedding.render(r,e),this.unstableEmbedding.render(o,e,i=>{a([i])})}render(r,o,e,a){this.updateEmbedding(r,o,e,a),this.svg.on("click",()=>a([]));let i=ae().scaleExtent([1,20]).filter(n=>n.type==="wheel").on("zoom",n=>{n.transform.k<=1&&(n.transform.k=1,n.transform.x=0,n.transform.y=0),this.groupContainer.transition().delay(10).attr("transform",n.transform)});return this.svg.call(i),this.svg.node()}updateUnstEmbedding(r,o,e){this.unstableEmbedding.render(r,o,a=>{e([a])}),this.originalEmbedding.updateUnstEmbedding(r)}setVisibility(r,o,e=[]){switch(r){case"neighbors":this.neighborEmbedding.setVisibility(o);break;case"ghosts":this.ghostEmbedding.setVisibility(o);break;case"unstables":this.originalEmbedding.setVisibility(o,e),this.unstableEmbedding.setVisibility(o);break}}updateDetail(r,o,e,a){this.ghostEmbedding.render(o,e,a),this.neighborEmbedding.render(r,e,a),this.unstableEmbedding.render(r.filter(i=>a.includes(i.id)),e,i=>{})}resetDetail(r,o,e){this.ghostEmbedding.reset(),this.neighborEmbedding.reset(),this.unstableEmbedding.render(r,o,a=>{e([a])})}},bo=me;var he=globalThis,fo=he.trustedTypes,Hi=fo?fo.createPolicy("lit-html",{createHTML:t=>t}):void 0,Wi="$lit$",vt=`lit$${Math.random().toFixed(9).slice(2)}$`,Ki="?"+vt,Hl=`<${Ki}>`,Nt=document,$r=()=>Nt.createComment(""),Sr=t=>t===null||typeof t!="object"&&typeof t!="function",Zi=Array.isArray,ql=t=>Zi(t)||typeof t?.[Symbol.iterator]=="function",pe=`[ 	
\f\r]`,Ar=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,qi=/-->/g,Ui=/>/g,jt=RegExp(`>|${pe}(?:([^\\s"'>=/]+)(${pe}*=${pe}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`,"g"),Yi=/'/g,Xi=/"/g,Qi=/^(?:script|style|textarea|title)$/i,Ji=t=>(r,...o)=>({_$litType$:t,strings:r,values:o}),j=Ji(1),mv=Ji(2),Bt=Symbol.for("lit-noChange"),C=Symbol.for("lit-nothing"),Fi=new WeakMap,Rt=Nt.createTreeWalker(Nt,129);function tn(t,r){if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return Hi!==void 0?Hi.createHTML(r):r}var Ul=(t,r)=>{let o=t.length-1,e=[],a,i=r===2?"<svg>":"",n=Ar;for(let s=0;s<o;s++){let l=t[s],d,m,p=-1,b=0;for(;b<l.length&&(n.lastIndex=b,m=n.exec(l),m!==null);)b=n.lastIndex,n===Ar?m[1]==="!--"?n=qi:m[1]!==void 0?n=Ui:m[2]!==void 0?(Qi.test(m[2])&&(a=RegExp("</"+m[2],"g")),n=jt):m[3]!==void 0&&(n=jt):n===jt?m[0]===">"?(n=a??Ar,p=-1):m[1]===void 0?p=-2:(p=n.lastIndex-m[2].length,d=m[1],n=m[3]===void 0?jt:m[3]==='"'?Xi:Yi):n===Xi||n===Yi?n=jt:n===qi||n===Ui?n=Ar:(n=jt,a=void 0);let f=n===jt&&t[s+1].startsWith("/>")?" ":"";i+=n===Ar?l+Hl:p>=0?(e.push(d),l.slice(0,p)+Wi+l.slice(p)+vt+f):l+vt+(p===-2?s:f)}return[tn(t,i+(t[o]||"<?>")+(r===2?"</svg>":"")),e]},Mr=class t{constructor({strings:r,_$litType$:o},e){let a;this.parts=[];let i=0,n=0,s=r.length-1,l=this.parts,[d,m]=Ul(r,o);if(this.el=t.createElement(d,e),Rt.currentNode=this.el.content,o===2){let p=this.el.content.firstChild;p.replaceWith(...p.childNodes)}for(;(a=Rt.nextNode())!==null&&l.length<s;){if(a.nodeType===1){if(a.hasAttributes())for(let p of a.getAttributeNames())if(p.endsWith(Wi)){let b=m[n++],f=a.getAttribute(p).split(vt),u=/([.?@])?(.*)/.exec(b);l.push({type:1,index:i,name:u[2],strings:f,ctor:u[1]==="."?be:u[1]==="?"?fe:u[1]==="@"?ge:Wt}),a.removeAttribute(p)}else p.startsWith(vt)&&(l.push({type:6,index:i}),a.removeAttribute(p));if(Qi.test(a.tagName)){let p=a.textContent.split(vt),b=p.length-1;if(b>0){a.textContent=fo?fo.emptyScript:"";for(let f=0;f<b;f++)a.append(p[f],$r()),Rt.nextNode(),l.push({type:2,index:++i});a.append(p[b],$r())}}}else if(a.nodeType===8)if(a.data===Ki)l.push({type:2,index:i});else{let p=-1;for(;(p=a.data.indexOf(vt,p+1))!==-1;)l.push({type:7,index:i}),p+=vt.length-1}i++}}static createElement(r,o){let e=Nt.createElement("template");return e.innerHTML=r,e}};function Ft(t,r,o=t,e){if(r===Bt)return r;let a=e!==void 0?o._$Co?.[e]:o._$Cl,i=Sr(r)?void 0:r._$litDirective$;return a?.constructor!==i&&(a?._$AO?.(!1),i===void 0?a=void 0:(a=new i(t),a._$AT(t,o,e)),e!==void 0?(o._$Co??=[])[e]=a:o._$Cl=a),a!==void 0&&(r=Ft(t,a._$AS(t,r.values),a,e)),r}var ce=class{constructor(r,o){this._$AV=[],this._$AN=void 0,this._$AD=r,this._$AM=o}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(r){let{el:{content:o},parts:e}=this._$AD,a=(r?.creationScope??Nt).importNode(o,!0);Rt.currentNode=a;let i=Rt.nextNode(),n=0,s=0,l=e[0];for(;l!==void 0;){if(n===l.index){let d;l.type===2?d=new Er(i,i.nextSibling,this,r):l.type===1?d=new l.ctor(i,l.name,l.strings,this,r):l.type===6&&(d=new ue(i,this,r)),this._$AV.push(d),l=e[++s]}n!==l?.index&&(i=Rt.nextNode(),n++)}return Rt.currentNode=Nt,a}p(r){let o=0;for(let e of this._$AV)e!==void 0&&(e.strings!==void 0?(e._$AI(r,e,o),o+=e.strings.length-2):e._$AI(r[o])),o++}},Er=class t{get _$AU(){return this._$AM?._$AU??this._$Cv}constructor(r,o,e,a){this.type=2,this._$AH=C,this._$AN=void 0,this._$AA=r,this._$AB=o,this._$AM=e,this.options=a,this._$Cv=a?.isConnected??!0}get parentNode(){let r=this._$AA.parentNode,o=this._$AM;return o!==void 0&&r?.nodeType===11&&(r=o.parentNode),r}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(r,o=this){r=Ft(this,r,o),Sr(r)?r===C||r==null||r===""?(this._$AH!==C&&this._$AR(),this._$AH=C):r!==this._$AH&&r!==Bt&&this._(r):r._$litType$!==void 0?this.$(r):r.nodeType!==void 0?this.T(r):ql(r)?this.k(r):this._(r)}S(r){return this._$AA.parentNode.insertBefore(r,this._$AB)}T(r){this._$AH!==r&&(this._$AR(),this._$AH=this.S(r))}_(r){this._$AH!==C&&Sr(this._$AH)?this._$AA.nextSibling.data=r:this.T(Nt.createTextNode(r)),this._$AH=r}$(r){let{values:o,_$litType$:e}=r,a=typeof e=="number"?this._$AC(r):(e.el===void 0&&(e.el=Mr.createElement(tn(e.h,e.h[0]),this.options)),e);if(this._$AH?._$AD===a)this._$AH.p(o);else{let i=new ce(a,this),n=i.u(this.options);i.p(o),this.T(n),this._$AH=i}}_$AC(r){let o=Fi.get(r.strings);return o===void 0&&Fi.set(r.strings,o=new Mr(r)),o}k(r){Zi(this._$AH)||(this._$AH=[],this._$AR());let o=this._$AH,e,a=0;for(let i of r)a===o.length?o.push(e=new t(this.S($r()),this.S($r()),this,this.options)):e=o[a],e._$AI(i),a++;a<o.length&&(this._$AR(e&&e._$AB.nextSibling,a),o.length=a)}_$AR(r=this._$AA.nextSibling,o){for(this._$AP?.(!1,!0,o);r&&r!==this._$AB;){let e=r.nextSibling;r.remove(),r=e}}setConnected(r){this._$AM===void 0&&(this._$Cv=r,this._$AP?.(r))}},Wt=class{get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}constructor(r,o,e,a,i){this.type=1,this._$AH=C,this._$AN=void 0,this.element=r,this.name=o,this._$AM=a,this.options=i,e.length>2||e[0]!==""||e[1]!==""?(this._$AH=Array(e.length-1).fill(new String),this.strings=e):this._$AH=C}_$AI(r,o=this,e,a){let i=this.strings,n=!1;if(i===void 0)r=Ft(this,r,o,0),n=!Sr(r)||r!==this._$AH&&r!==Bt,n&&(this._$AH=r);else{let s=r,l,d;for(r=i[0],l=0;l<i.length-1;l++)d=Ft(this,s[e+l],o,l),d===Bt&&(d=this._$AH[l]),n||=!Sr(d)||d!==this._$AH[l],d===C?r=C:r!==C&&(r+=(d??"")+i[l+1]),this._$AH[l]=d}n&&!a&&this.j(r)}j(r){r===C?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,r??"")}},be=class extends Wt{constructor(){super(...arguments),this.type=3}j(r){this.element[this.name]=r===C?void 0:r}},fe=class extends Wt{constructor(){super(...arguments),this.type=4}j(r){this.element.toggleAttribute(this.name,!!r&&r!==C)}},ge=class extends Wt{constructor(r,o,e,a,i){super(r,o,e,a,i),this.type=5}_$AI(r,o=this){if((r=Ft(this,r,o,0)??C)===Bt)return;let e=this._$AH,a=r===C&&e!==C||r.capture!==e.capture||r.once!==e.once||r.passive!==e.passive,i=r!==C&&(e===C||a);a&&this.element.removeEventListener(this.name,this,e),i&&this.element.addEventListener(this.name,this,r),this._$AH=r}handleEvent(r){typeof this._$AH=="function"?this._$AH.call(this.options?.host??this.element,r):this._$AH.handleEvent(r)}},ue=class{constructor(r,o,e){this.element=r,this.type=6,this._$AN=void 0,this._$AM=o,this.options=e}get _$AU(){return this._$AM._$AU}_$AI(r){Ft(this,r)}};var Yl=he.litHtmlPolyfillSupport;Yl?.(Mr,Er),(he.litHtmlVersions??=[]).push("3.1.4");var it=(t,r,o)=>{let e=o?.renderBefore??r,a=e._$litPart$;if(a===void 0){let i=o?.renderBefore??null;e._$litPart$=a=new Er(r.insertBefore($r(),i),i,void 0,o??{})}return a._$AI(t),a};var rn={ATTRIBUTE:1,CHILD:2,PROPERTY:3,BOOLEAN_ATTRIBUTE:4,EVENT:5,ELEMENT:6},on=t=>(...r)=>({_$litDirective$:t,values:r}),go=class{constructor(r){}get _$AU(){return this._$AM._$AU}_$AT(r,o,e){this._$Ct=r,this._$AM=o,this._$Ci=e}_$AS(r,o){return this.update(r,o)}update(r,o){return this.render(...o)}};var en="important",Xl=" !"+en,N=on(class extends go{constructor(t){if(super(t),t.type!==rn.ATTRIBUTE||t.name!=="style"||t.strings?.length>2)throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.")}render(t){return Object.keys(t).reduce((r,o)=>{let e=t[o];return e==null?r:r+`${o=o.includes("-")?o:o.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,"-$&").toLowerCase()}:${e};`},"")}update(t,[r]){let{style:o}=t.element;if(this.ft===void 0)return this.ft=new Set(Object.keys(r)),this.render(r);for(let e of this.ft)r[e]==null&&(this.ft.delete(e),e.includes("-")?o.removeProperty(e):o[e]=null);for(let e in r){let a=r[e];if(a!=null){this.ft.add(e);let i=typeof a=="string"&&a.endsWith(Xl);e.includes("-")||i?o.setProperty(e,i?a.slice(0,-11):a,i?en:""):o[e]=a}}return Bt}});var Fl={display:"flex","flex-direction":"column","margin-bottom":"10px"},ve=class{constructor(r,o,e,a,i){this.id=r;this.label=o;this.min=e;this.max=a;this.step=i}render(r){let o=r.get(this.id),e=typeof o=="number"?o.toFixed(2):"N/A";return j`
      <div class="slider-container" style=${N(Fl)}>
        <label for="${this.id}" id="${this.id}-value"
          >${this.label}: ${e}</label
        >
        <input
          type="range"
          id="${this.id}"
          min="${this.min}"
          max="${this.max}"
          step="${this.step}"
          .value="${typeof o=="number"?o:0}"
          @change="${a=>{r.set(this.id,+a.target.value),r.save_changes()}}"
        />
      </div>
    `}},xe=ve;var we=class{constructor(r,o){this.id=r;this.label=o}render(r){return j`
      <label>
        <input
          type="checkbox"
          id="${this.id}"
          .checked="${r.get(this.id)}"
          @change="${o=>{r.set(this.id,o.target.checked),r.save_changes()}}"
        />
        ${this.label}
      </label>
    `}},uo=we;var ye=class{constructor(){this.id="embedding_id",this.label="Dataset"}render(r){let o=r.get("embedding_id"),e=r.get("embedding_set").map(a=>a.title);return j`
      <div class="selector-container">
        <label for="${this.id}">${this.label}</label>
        <select
          id="${this.id}"
          @change="${a=>{r.set(this.id,+a.target.value),r.save_changes()}}"
        >
          ${e.map((a,i)=>j`
              <option value="${i}" ?selected="${i===o}">
                ${a}
              </option>
            `)}
        </select>
      </div>
    `}},an=ye;var Wl={"font-size":"2em","font-weight":"bold","margin-bottom":"10px"},Kl={"margin-bottom":"10px"},Zl={display:"flex","align-items":"center","margin-bottom":"10px"},ke=class{constructor(){this.container=document.createElement("div"),this.selector=new an,this.sliders=[new xe("distance","Distance",.01,1,.01),new xe("sensitivity","Sensitivity",.01,1,.01)],this.checkboxes=[new uo("show_unstables","Unstables"),new uo("show_neighbors","Neighbors"),new uo("show_ghosts","Ghosts")]}update(r,o){let e=["distance","sensitivity"].includes(r);console.log(r,o),e&&typeof o=="number"&&(B("#"+r).attr("value",o.toString()),B("#"+r+"-value").text(o.toFixed(2))),["show_neighbors","show_ghosts","show_unstables"].includes(r)&&B("#"+r).attr("checked",o)}render(r){let o=j`
      <div class="settings-container">
        <div style=${N(Wl)}>Settings</div>
        <div style=${N(Kl)}>
          ${this.selector.render(r)}
        </div>
        <div style=${N(Zl)}>
          ${this.checkboxes.map(e=>e.render(r))}
        </div>
        ${this.sliders.map(e=>j` <div>${e.render(r)}</div> `)}
      </div>
    `;return it(o,this.container),this.container}},ho=ke;var _e=class{constructor(){this.container=document.createElement("div")}update(r,o){let e=j`
      <div id="unstableInfo">
        Number of Unstables: ${r||0}
        (${o?.toFixed(4)||0}%)
      </div>
    `;it(e,this.container)}render(r,o){return this.update(r,o),this.container}},nn=_e;var Ql={height:"200px","max-width":"200px","overflow-y":"auto",border:"1px solid #ccc",padding:"5px","margin-top":"5px","font-size":"0.9em",color:"#555"},Jl={display:"flex","align-items":"center","margin-bottom":"2px"},ze=class{constructor(){this.container=document.createElement("div")}onClick(r,o,e,a){let i=e();a(o?[...i,r]:i.filter(n=>n!==r))}updateCheckbox(r){console.log("updateCheckbox",r),Pr(".unstable-list input").property("checked",!1),r.forEach(o=>{B(`#unstable-${o}`).property("checked",!0)})}reset(){Pr(".unstable-list input").property("checked",!1)}update(r,o,e){let a=r.sort((n,s)=>s.instability-n.instability),i=j`
      <div class="unstable-list" style=${N(Ql)}>
        ${a.length?a.map(n=>j`
                <div style=${N(Jl)}>
                  <input
                    type="checkbox"
                    id="unstable-${n.id}"
                    name="unstable-${n.id}"
                    @click=${s=>this.onClick(n.id,s.target.checked,o,e)}
                  />
                  <label for="unstable-${n.id}" style="margin-left: 5px;"
                    >${n.id} (INS: ${n.instability.toFixed(2)})
                  </label>
                </div>
              `):j`<div>None</div>`}
      </div>
    `;it(i,this.container)}render(r,o,e){return this.update(r,o,e),this.container}},sn=ze;var ln={"margin-top":"10px"},td={"font-size":"2em","font-weight":"bold"},Ct=class{constructor(){this.container=document.createElement("div"),this.unstableCounter=new nn,this.unstableIDList=new sn}update(r,o,e,a,i){this.unstableCounter.update(o,e),this.unstableIDList.update(r,a,i)}updateCheckbox(r){this.unstableIDList.updateCheckbox(r)}render(r,o,e,a,i){let n=j`
      <div style=${N(td)}>Unstables</div>
      <div style=${N(ln)}>
        ${this.unstableCounter.render(o,e)}
      </div>
      <div style=${N(ln)}>
        ${this.unstableIDList.render(r,a,i)}
      </div>
    `;return it(n,this.container),this.container}};var Ae=class{constructor(r,o){this.width=r,this.height=o,this.svg=this.createSVG(),this.symbolLegend=this.svg.append("g"),this.labelLegend=this.svg.append("g")}createSVG(){return Ot("svg").attr("class","legend").attr("width",`${this.width}px`).attr("height",`${this.height}px`)}renderSymbolLegend(){let r=[{label:"Unstable",symbol:xr},{label:"Ghost",symbol:wr},{label:"Neighbor",symbol:yr}];this.symbolLegend.attr("transform","translate(20, 50)"),this.symbolLegend.selectAll("path").data(r).join("path").attr("d",et().type(o=>o.symbol).size(150)).attr("transform",(o,e)=>`translate(0, ${20+e*25})`).attr("fill","none").attr("stroke","black").attr("stroke-width",1),this.symbolLegend.selectAll("text").data(r).join("text").text(o=>o.label).attr("x",20).attr("y",(o,e)=>22+e*25).attr("alignment-baseline","middle").attr("font-size","16px")}renderLabelLegend(r,o){r.length===0&&Object.keys(o).length===0||(this.labelLegend.attr("transform",`translate(20, ${this.height/2})`),r.length?o=r.reduce((e,a,i)=>(e[a]=Ut[i],e),{}):r=Object.keys(o),this.labelLegend.selectAll("circle").data(r).join("circle").attr("cx",0).attr("cy",(e,a)=>10+a*20).attr("r",6).attr("fill",e=>o[e]),this.labelLegend.selectAll("text").data(r).join("text").text(e=>e).attr("x",15).attr("y",(e,a)=>11+a*20).attr("alignment-baseline","middle").attr("font-size","16px"))}render(r,o){return this.renderSymbolLegend(),this.renderLabelLegend(r,o),this.svg.node()}update(r,o){this.renderLabelLegend(r,o)}},$e=Ae;var dn={display:"flex",flexDirection:"column",justifyContent:"space-between",height:"100%","padding-right":"30px"},mn={display:"flex",flexDirection:"row"},pn={display:"flex",flexDirection:"row",justifyContent:"center",alignItems:"center",border:"none",width:"100%",margin:0,padding:0,backgroundColor:"#fff",color:"#333"},cn={width:"100%",padding:"5px"},bn={padding:"5px"};function fn(t,r,o,e,a,i){let n=()=>{let{origEmb:d,unstEmb:m,scales:p,legend:b,colors:f}=bt(t);i([]);let u=Xt(t,m,d.length);r.updateEmbedding(d,m,p,i),o.update(b,f),e.update("distance",t.get("distance")),a.update(m,u.numUnstables,u.percentUnstables,()=>t.get("checkedUnstables"),i)},s=d=>{let{origEmb:m,unstEmb:p,scales:b}=bt(t),{numUnstables:f,percentUnstables:u}=Xt(t,p,m.length);i([]),r.updateUnstEmbedding(p,b,i),e.update(d,t.get(d)),a.update(p,f,u,()=>t.get("checkedUnstables"),i)},l=d=>{let{unstEmb:m}=bt(t),p=`show_${d}`;r.setVisibility(d,t.get(p),m),e.update(p,t.get(p))};t.on("change:embedding_id",n),t.on("change:distance",()=>s("distance")),t.on("change:sensitivity",()=>s("sensitivity")),t.on("change:show_unstables",()=>l("unstables")),t.on("change:show_neighbors",()=>l("neighbors")),t.on("change:show_ghosts",()=>l("ghosts")),t.on("change:unstableInfo",()=>{let{unstEmb:d}=bt(t),m=t.get("unstableInfo");a.update(d,m.numUnstables,m.percentUnstables,()=>t.get("checkedUnstables"),i)}),t.on("change:checkedUnstables",()=>{let{origEmb:d,unstEmb:m,ghostEmb:p,scales:b}=bt(t),f=t.get("checkedUnstables");console.log("checkedUnstables",f),f.length===0?r.resetDetail(m,b,i):r.updateDetail(d,p,b,f),a.updateCheckbox(f)})}function rd({model:t,el:r}){let o=r.shadowRoot||r.attachShadow({mode:"open"});o.childNodes.length>0&&(o.innerHTML="");let e=document.createElement("div"),a=new bo(t.get("width"),t.get("height")),i=new $e(t.get("legend_width"),t.get("legend_height")),n=new ho,s=new Ct,l=k=>{t.set("checkedUnstables",k),t.save_changes()},{origEmb:d,unstEmb:m,scales:p,legend:b,colors:f}=bt(t),u=Xt(t,m,d.length);it(j` <div
      id="widget-container"
      class="container"
      style=${N(pn)}
    >
      <div class="row" style="width:100%;display:flex;flex-direction:row;">
        <div class="col-md-3 left" style=${N(dn)}>
          <div class="toolbar">${n.render(t)}</div>
          <div class="unstable-container">
            ${s.render(m,u.numUnstables,u.percentUnstables,()=>t.get("checkedUnstables"),l)}
          </div>
        </div>
        <div class="col-md-9 scatterplot" style=${N(mn)}>
          <div class="projection" style=${N(cn)}>
            ${a.render(d,m,p,l)}
          </div>
          <div class="legend" style=${N(bn)}>
            ${i.render(b,f)}
          </div>
        </div>
      </div>
    </div>`,e),o.appendChild(e),fn(t,a,i,n,s,l)}var g0={render:rd};export{g0 as default};
/*! Bundled license information:

lit-html/lit-html.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directive.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directives/style-map.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
*/
//# sourceMappingURL=data:application/json;base64,
